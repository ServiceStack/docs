import{_ as n,o as a,c as s,a as e}from"./app.3ff27770.js";const m=`{"title":"Getting started with OrmLite","description":"","frontmatter":{"title":"Getting started with OrmLite"},"headers":[{"level":3,"title":"SQL Server Dialects","slug":"sql-server-dialects"},{"level":2,"title":"OrmLite Connection Factory","slug":"ormlite-connection-factory"},{"level":3,"title":"Creating Table and Seed Data Example","slug":"creating-table-and-seed-data-example"},{"level":3,"title":"Multiple database connections","slug":"multiple-database-connections"},{"level":2,"title":"Setup and Installation","slug":"setup-and-installation"},{"level":2,"title":"Creating a Connection","slug":"creating-a-connection"},{"level":2,"title":"Creating a Model","slug":"creating-a-model"},{"level":2,"title":"Creating a Table","slug":"creating-a-table"},{"level":2,"title":"Inserting Data","slug":"inserting-data"},{"level":2,"title":"Updating Data","slug":"updating-data"},{"level":2,"title":"Deleting Data","slug":"deleting-data"},{"level":2,"title":"Registering the Database Connection Factory","slug":"registering-the-database-connection-factory"},{"level":2,"title":"Creating a ServiceStack Service","slug":"creating-a-servicestack-service"},{"level":2,"title":"Lambda Expressions","slug":"lambda-expressions"},{"level":2,"title":"From<T> Method","slug":"from-t-method"},{"level":2,"title":"Plain SQL","slug":"plain-sql"},{"level":2,"title":"Basic Insert","slug":"basic-insert"},{"level":2,"title":"Inserting with SelectIdentity","slug":"inserting-with-selectidentity"},{"level":2,"title":"Inserting Multiple Records","slug":"inserting-multiple-records"},{"level":2,"title":"Basic Update","slug":"basic-update"},{"level":2,"title":"Conditional Update","slug":"conditional-update"},{"level":2,"title":"Updating Related Records","slug":"updating-related-records"},{"level":2,"title":"Basic Deletion","slug":"basic-deletion"},{"level":2,"title":"Conditional Deletion","slug":"conditional-deletion"},{"level":2,"title":"AutoQuery and Code First Models","slug":"autoquery-and-code-first-models"},{"level":2,"title":"AutoQuery and Database First Approach","slug":"autoquery-and-database-first-approach"},{"level":2,"title":"Locode","slug":"locode"},{"level":2,"title":"Code Generation with ServiceStack 'x' Tool","slug":"code-generation-with-servicestack-x-tool"}],"relativePath":"ormlite/getting-started.md"}`,t={},o=e(`<p>After <a href="./installation">installing OrmLite</a> we now need to configure OrmLite&#39;s DB Connection Factory containing the RDBMS Dialect you want to use and the primary DB connection string you wish to connect to. Most NuGet OrmLite packages only contain a single provider listed below:</p><div class="language-csharp"><pre><code>SqlServerDialect<span class="token punctuation">.</span>Provider      <span class="token comment">// SQL Server Version 2012+</span>
SqliteDialect<span class="token punctuation">.</span>Provider         <span class="token comment">// Sqlite</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider     <span class="token comment">// PostgreSQL </span>
MySqlDialect<span class="token punctuation">.</span>Provider          <span class="token comment">// MySql</span>
OracleDialect<span class="token punctuation">.</span>Provider         <span class="token comment">// Oracle</span>
FirebirdDialect<span class="token punctuation">.</span>Provider       <span class="token comment">// Firebird</span>
</code></pre></div><h3 id="sql-server-dialects" tabindex="-1">SQL Server Dialects <a class="header-anchor" href="#sql-server-dialects" aria-hidden="true">#</a></h3><p>Except for SQL Server which has a number of different dialects to take advantage of features available in each version, please use the best matching version closest to your SQL Server version:</p><div class="language-csharp"><pre><code>SqlServer2008Dialect<span class="token punctuation">.</span>Provider  <span class="token comment">// SQL Server &lt;= 2008</span>
SqlServer2012Dialect<span class="token punctuation">.</span>Provider  <span class="token comment">// SQL Server 2012</span>
SqlServer2014Dialect<span class="token punctuation">.</span>Provider  <span class="token comment">// SQL Server 2014</span>
SqlServer2016Dialect<span class="token punctuation">.</span>Provider  <span class="token comment">// SQL Server 2016</span>
SqlServer2017Dialect<span class="token punctuation">.</span>Provider  <span class="token comment">// SQL Server 2017+</span>
</code></pre></div><h2 id="ormlite-connection-factory" tabindex="-1">OrmLite Connection Factory <a class="header-anchor" href="#ormlite-connection-factory" aria-hidden="true">#</a></h2><p>To configure OrmLite you&#39;ll need your App&#39;s DB Connection string along the above RDBMS Dialect Provider, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> dbFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>
    connectionString<span class="token punctuation">,</span>  
    SqlServerDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you&#39;re using an IOC register <code>OrmLiteConnectionFactory</code> as a <strong>singleton</strong>:</p><div class="language-csharp"><pre><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">,</span> SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//InMemory Sqlite DB</span>
</code></pre></div><p>Which can then be used to open DB Connections to your RDBMS.</p><h3 id="creating-table-and-seed-data-example" tabindex="-1">Creating Table and Seed Data Example <a class="header-anchor" href="#creating-table-and-seed-data-example" aria-hidden="true">#</a></h3><p>If connecting to an empty database you can use OrmLite&#39;s Create Table APIs to create any missing tables you need, which OrmLite creates based solely on the Schema definition of your POCO data models.</p><p><code>CreateTableIfNotExists</code> returns <strong>true</strong> if the table didn&#39;t exist and OrmLite created it, where it can be further populated with any initial seed data it should have, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> dbFactory<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTableIfNotExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Seed Data&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= {Id: 1, Name:Seed Data}</span>
</code></pre></div><h3 id="multiple-database-connections" tabindex="-1">Multiple database connections <a class="header-anchor" href="#multiple-database-connections" aria-hidden="true">#</a></h3><p>Any number of named RDBMS connections can be registered OrmLite&#39;s DbFactory <code>RegisterConnection</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token comment">// SqlServer with a named &quot;Reporting&quot; PostgreSQL connection as a part of the same \`dbFactory\`</span>
<span class="token class-name"><span class="token keyword">var</span></span> dbFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>connString<span class="token punctuation">,</span> SqlServer2012Dialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>dbFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

dbFactory<span class="token punctuation">.</span><span class="token function">RegisterConnection</span><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">,</span> pgConnString<span class="token punctuation">,</span> PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Named connections can be opened by its name:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> dbFactory<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If using ServiceStack the <code>[NamedConnection]</code> attribute can be used to configure Services <code>base.Db</code> connection with the named connection RDBMS, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">NamedConnection</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryReports</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReportServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">QueryReports</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Reports<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Or if using <a href="/autoquery">AutoQuery</a> it can be used to associate Data Models with the named connection:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">NamedConnection</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reports</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryReports</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>Reports<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>More examples available in <a href="/multitenancy">Multitenancy</a> docs.</p><h1 id="detailed-walkthrough" tabindex="-1">Detailed Walkthrough <a class="header-anchor" href="#detailed-walkthrough" aria-hidden="true">#</a></h1><p>OrmLite is a lightweight, convention-based Object-Relational Mapper (ORM) offered within the ServiceStack suite of libraries. This tutorial aims to guide you through the basic functionality of OrmLite, covering its usage both as a standalone library and as an integrated part of a ServiceStack service. You will learn how to set up OrmLite, create data models, perform standard CRUD operations, and utilize the library&#39;s unique query functionalities. This tutorial provides a comprehensive starting point for developers looking to understand and effectively use OrmLite in their .NET projects.</p><h2 id="setup-and-installation" tabindex="-1">Setup and Installation <a class="header-anchor" href="#setup-and-installation" aria-hidden="true">#</a></h2><p>To begin using OrmLite, you&#39;ll need to install it in your project. For a basic Console application, you&#39;ll want to add the OrmLite NuGet package for the database you&#39;re planning to use. This tutorial will use SQLite as an example. So, within your Package Manager Console, input <code>Install-Package ServiceStack.OrmLite.Sqlite</code>.</p><p>The next step is creating a connection to your database. Here&#39;s how you do it:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> dbFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">,</span> SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This snippet establishes an in-memory SQLite database connection. In a real-world application, you&#39;d replace <code>&quot;:memory:&quot;</code> with your SQLite database&#39;s connection string.</p><p>OrmLite supports multiple database types, including MS SQL Server, MySQL, and PostgreSQL. To use these, simply install the corresponding NuGet package and replace <code>SqliteDialect.Provider</code> with the appropriate provider (i.e., <code>SqlServerDialect.Provider</code>, <code>MySqlDialect.Provider</code>, or <code>PostgreSqlDialect.Provider</code>).</p><p>If you&#39;re planning on using OrmLite within a ServiceStack project, you can streamline the setup process with the ServiceStack .NET tool <code>x</code> and the command <code>x mix &lt;database technology&gt;</code>. For SQLite, use <code>x mix sqlite</code>.</p><p>After setup, you&#39;re now ready to establish a database connection and execute queries from your project.</p><h1 id="basic-usage-standalone" tabindex="-1">Basic Usage (Standalone) <a class="header-anchor" href="#basic-usage-standalone" aria-hidden="true">#</a></h1><p>OrmLite is designed for simplicity and efficiency, enabling you to perform CRUD operations directly from your .NET classes. Here&#39;s an example of how you can utilize OrmLite in a standalone context.</p><h2 id="creating-a-connection" tabindex="-1">Creating a Connection <a class="header-anchor" href="#creating-a-connection" aria-hidden="true">#</a></h2><p>Creating a connection with your database is as simple as calling <code>OpenDbConnection</code> on your <code>IDbConnectionFactory</code> instance.</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> dbFactory<span class="token punctuation">.</span><span class="token function">OpenDbConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This line establishes a connection to your database and ensures it is correctly disposed of once you&#39;re finished.</p><h2 id="creating-a-model" tabindex="-1">Creating a Model <a class="header-anchor" href="#creating-a-model" aria-hidden="true">#</a></h2><p>OrmLite maps C# classes to database tables. Here&#39;s an example model class <code>Order</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Customer <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> OrderDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this class, the <code>Id</code> property is annotated with <code>[AutoIncrement]</code>, telling OrmLite to auto-increment this field for new records.</p><h2 id="creating-a-table" tabindex="-1">Creating a Table <a class="header-anchor" href="#creating-a-table" aria-hidden="true">#</a></h2><p>Once your model is defined, you can use it to create a new table:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTableIfNotExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This method creates a new <code>Order</code> table if it doesn&#39;t already exist in your database.</p><h2 id="inserting-data" tabindex="-1">Inserting Data <a class="header-anchor" href="#inserting-data" aria-hidden="true">#</a></h2><p>To insert data, use the <code>Insert</code> method:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    Customer <span class="token operator">=</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
    OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>Insert</code> method adds a new record to the <code>Order</code> table. If you want to retrieve the auto-incremented Id after the insert, use <code>Insert</code> and <code>selectIdentity</code> together:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orderId <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token named-parameter punctuation">selectIdentity</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updating-data" tabindex="-1">Updating Data <a class="header-anchor" href="#updating-data" aria-hidden="true">#</a></h2><p>Updating records is just as easy. Make sure your instance includes the primary key value:</p><div class="language-csharp"><pre><code>order<span class="token punctuation">.</span>Customer <span class="token operator">=</span> <span class="token string">&quot;Jane Doe&quot;</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This updates the <code>Order</code> record that has the same <code>Id</code> as <code>order</code>.</p><h2 id="deleting-data" tabindex="-1">Deleting Data <a class="header-anchor" href="#deleting-data" aria-hidden="true">#</a></h2><p>Finally, deleting a record is a simple call to <code>Delete</code>:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This deletes the <code>Order</code> record with the same <code>Id</code> as <code>order</code>. To delete a record based on a condition, use <code>Delete&lt;T&gt;(predicate)</code>:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Customer <span class="token operator">==</span> <span class="token string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This covers the basics of standalone OrmLite usage - creating a connection, defining a model, and performing CRUD operations. In the next sections, we&#39;ll dive into how to use OrmLite within a ServiceStack service and cover more complex queries and operations.</p><p><strong>Usage from a ServiceStack Service</strong></p><p>Utilizing OrmLite from a ServiceStack service is straightforward, due to ServiceStack&#39;s built-in integration with OrmLite. ServiceStack services can access a <code>Db</code> property which provides access to an OrmLite database connection.</p><h2 id="registering-the-database-connection-factory" tabindex="-1">Registering the Database Connection Factory <a class="header-anchor" href="#registering-the-database-connection-factory" aria-hidden="true">#</a></h2><p>Before you can use the <code>Db</code> property, you need to register an <code>IDbConnectionFactory</code> instance with ServiceStack&#39;s IoC container. This is usually done in your <code>ConfigureDb.cs</code> file:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureDb</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>
                context<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;DefaultConnection&quot;</span><span class="token punctuation">)</span>
                <span class="token operator">??</span> <span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">,</span>
                SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this code, an <code>OrmLiteConnectionFactory</code> is created and registered as a singleton service. This factory will create database connections when needed, using the provided connection string and dialect provider.</p><h2 id="creating-a-servicestack-service" tabindex="-1">Creating a ServiceStack Service <a class="header-anchor" href="#creating-a-servicestack-service" aria-hidden="true">#</a></h2><p>Here&#39;s an example of a ServiceStack service that performs basic CRUD operations on an <code>Order</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetOrder</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CreateOrder</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
        <span class="token punctuation">{</span>
            Customer <span class="token operator">=</span> request<span class="token punctuation">.</span>Customer<span class="token punctuation">,</span>
            OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> orderId <span class="token operator">=</span> Db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token named-parameter punctuation">selectIdentity</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateOrderResponse</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> orderId <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">UpdateOrder</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span>Customer <span class="token operator">=</span> request<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span>
        Db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">DeleteOrder</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this service, we&#39;re utilizing the <code>Db</code> property, which gives us a handle to the database connection. We can then use this handle to perform CRUD operations in the same way we did in a standalone context.</p><p>The service methods match HTTP verbs based on their prefix: <code>Any</code> methods can respond to any HTTP verb, <code>Get</code> methods respond to GET requests, <code>Post</code> methods respond to POST requests, and so on.</p><p><strong>Code-First Models</strong></p><p>OrmLite uses a code-first approach to data modeling, which means you define your data model using C# classes, and OrmLite will take care of creating the corresponding database schema. This includes creating tables, defining columns and their types, and setting up relationships between tables.</p><p>In OrmLite, you can add various attributes to your class and property definitions that control how they&#39;re treated by OrmLite when generating schema or performing database operations. Here&#39;s an example <code>Order</code> class with some of these attributes:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PrimaryKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OrderNumber <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Reference</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderLine<span class="token punctuation">&gt;</span></span> OrderLines <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this class definition:</p><ul><li>The <code>[Alias]</code> attribute changes the name of the generated table to <code>Orders</code>.</li><li>The <code>[AutoIncrement]</code> attribute specifies that the <code>Id</code> column should automatically increment its value.</li><li>The <code>[PrimaryKey]</code> attribute designates <code>Id</code> as the primary key for the <code>Order</code> table.</li><li>The <code>[Required]</code> attribute indicates that the <code>OrderNumber</code> property must have a value before an order can be inserted or updated in the database.</li><li>The <code>[Index]</code> attribute creates an index on the <code>OrderNumber</code> column and the <code>Unique = true</code> property ensures that the <code>OrderNumber</code> value is unique across all orders.</li><li>The <code>[Reference]</code> attribute enables us to use features like <code>LoadSelect&lt;T&gt;</code> to pull data from related tables.</li></ul><p>The corresponding <code>OrderLine</code> class may look something like this:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderLine</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PrimaryKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ForeignKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Product <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Quantity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this <code>OrderLine</code> class definition:</p><ul><li>The <code>[ForeignKey]</code> attribute defines a foreign key relationship from <code>OrderLine</code> to <code>Order</code>. The <code>OrderId</code> property in <code>OrderLine</code> corresponds to the <code>Id</code> property in <code>Order</code>.</li></ul><h1 id="different-ways-to-query" tabindex="-1">Different ways to Query <a class="header-anchor" href="#different-ways-to-query" aria-hidden="true">#</a></h1><p>OrmLite offers several ways to query your database, catering to different levels of complexity and customization needs. Here, we will explore three methods: lambda expressions, the <code>From&lt;T&gt;</code> method, and plain SQL queries.</p><p>Let&#39;s use our <code>Order</code> and <code>OrderLine</code> models and assume we already have some data in our database.</p><h2 id="lambda-expressions" tabindex="-1">Lambda Expressions <a class="header-anchor" href="#lambda-expressions" aria-hidden="true">#</a></h2><p>Lambda expressions are the simplest way to query your database using OrmLite. You can use them directly within OrmLite&#39;s <code>Select&lt;T&gt;</code> method:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderNumber <span class="token operator">==</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This line will fetch all orders where <code>OrderNumber</code> equals &quot;1234&quot;. It&#39;s straightforward and easy to understand.</p><h2 id="from-t-method" tabindex="-1"><code>From&lt;T&gt;</code> Method <a class="header-anchor" href="#from-t-method" aria-hidden="true">#</a></h2><p>The <code>From&lt;T&gt;</code> method provides more flexibility than simple lambda expressions. It enables you to build more complex queries involving multiple tables and conditions:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">,</span> OrderLine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderNumber <span class="token operator">==</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This query fetches all orders, and their corresponding <code>OrderLine</code> entries, where <code>OrderNumber</code> equals &quot;1234&quot;.</p><h2 id="plain-sql" tabindex="-1">Plain SQL <a class="header-anchor" href="#plain-sql" aria-hidden="true">#</a></h2><p>While OrmLite&#39;s query API is robust and handles a wide variety of query scenarios, there are times when you might need to drop down to raw SQL for the utmost control:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Orders WHERE OrderNumber = @orderNumber&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> orderNumber <span class="token operator">=</span> <span class="token string">&quot;1234&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This is a basic query but demonstrates that you can write and execute raw SQL queries in OrmLite.</p><h1 id="inserting-data-1" tabindex="-1">Inserting data <a class="header-anchor" href="#inserting-data-1" aria-hidden="true">#</a></h1><p>Inserting data into your database using OrmLite is as straightforward as querying. Let&#39;s dive into some examples using our <code>Order</code> and <code>OrderLine</code> models.</p><h2 id="basic-insert" tabindex="-1">Basic Insert <a class="header-anchor" href="#basic-insert" aria-hidden="true">#</a></h2><p>The simplest way to insert a new record into your database is by using the <code>Insert</code> method. You just need to create an instance of your model and pass it to the <code>Insert</code> method:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> newOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    OrderNumber <span class="token operator">=</span> <span class="token string">&quot;5678&quot;</span><span class="token punctuation">,</span>
    OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>newOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="inserting-with-selectidentity" tabindex="-1">Inserting with SelectIdentity <a class="header-anchor" href="#inserting-with-selectidentity" aria-hidden="true">#</a></h2><p>If your model has an <code>[AutoIncrement]</code> attribute on its primary key, you can retrieve the generated id during the insertion:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> newOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    OrderNumber <span class="token operator">=</span> <span class="token string">&quot;5678&quot;</span><span class="token punctuation">,</span>
    OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> newId <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>newOrder<span class="token punctuation">,</span> <span class="token named-parameter punctuation">selectIdentity</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="inserting-multiple-records" tabindex="-1">Inserting Multiple Records <a class="header-anchor" href="#inserting-multiple-records" aria-hidden="true">#</a></h2><p>OrmLite also allows you to insert multiple records at once:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orderLines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>OrderLine<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderLine</span> <span class="token punctuation">{</span> OrderId <span class="token operator">=</span> newId<span class="token punctuation">,</span> ProductName <span class="token operator">=</span> <span class="token string">&quot;Product 1&quot;</span><span class="token punctuation">,</span> Quantity <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderLine</span> <span class="token punctuation">{</span> OrderId <span class="token operator">=</span> newId<span class="token punctuation">,</span> ProductName <span class="token operator">=</span> <span class="token string">&quot;Product 2&quot;</span><span class="token punctuation">,</span> Quantity <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">InsertAll</span><span class="token punctuation">(</span>orderLines<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1 id="updating-data-1" tabindex="-1">Updating data <a class="header-anchor" href="#updating-data-1" aria-hidden="true">#</a></h1><p>Updating records in your database with OrmLite is a simple task. Let&#39;s use our <code>Order</code> and <code>OrderLine</code> models for demonstration.</p><h2 id="basic-update" tabindex="-1">Basic Update <a class="header-anchor" href="#basic-update" aria-hidden="true">#</a></h2><p>The most straightforward way to update a record in your database is by using the <code>Update</code> method. You need to create an instance of your model with the desired changes and pass it to the <code>Update</code> method:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orderToUpdate <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderNumber <span class="token operator">==</span> <span class="token string">&quot;5678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
orderToUpdate<span class="token punctuation">.</span>OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>orderToUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this example, the <code>Update</code> method uses the <code>Id</code> property (which is treated as the primary key by default) to identify the record to update.</p><h2 id="conditional-update" tabindex="-1">Conditional Update <a class="header-anchor" href="#conditional-update" aria-hidden="true">#</a></h2><p>In case you need to update multiple records based on a condition, you can use the <code>UpdateOnly</code> method. This method is powerful as it allows you to specify which properties to update and the condition for the records to be updated:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnly</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span> <span class="token punctuation">{</span> OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">where</span><span class="token punctuation">:</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderNumber <span class="token operator">==</span> <span class="token string">&quot;5678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this example, only the <code>OrderDate</code> property is updated for all <code>Order</code> records that have <code>&quot;5678&quot;</code> as their <code>OrderNumber</code>.</p><h2 id="updating-related-records" tabindex="-1">Updating Related Records <a class="header-anchor" href="#updating-related-records" aria-hidden="true">#</a></h2><p>Let&#39;s say you want to update the <code>ProductName</code> for a specific <code>OrderLine</code> associated with an <code>Order</code>. Here&#39;s how you can do it:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orderLineToUpdate <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderLine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderId <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>ProductName <span class="token operator">==</span> <span class="token string">&quot;Product 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
orderLineToUpdate<span class="token punctuation">.</span>ProductName <span class="token operator">=</span> <span class="token string">&quot;Updated Product Name&quot;</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>orderLineToUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1 id="deleting-data-1" tabindex="-1">Deleting data <a class="header-anchor" href="#deleting-data-1" aria-hidden="true">#</a></h1><p>Deleting records from your database is another straightforward operation with OrmLite. Once again, we&#39;ll use our <code>Order</code> and <code>OrderLine</code> models for demonstration.</p><h2 id="basic-deletion" tabindex="-1">Basic Deletion <a class="header-anchor" href="#basic-deletion" aria-hidden="true">#</a></h2><p>The simplest way to delete a record is by using the <code>Delete</code> method. You just need to pass an instance of your model with the ID of the record you want to delete:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orderToDelete <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderNumber <span class="token operator">==</span> <span class="token string">&quot;5678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>orderToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this example, the <code>Delete</code> method uses the <code>Id</code> property (which is treated as the primary key by default) to identify the record to delete.</p><h2 id="conditional-deletion" tabindex="-1">Conditional Deletion <a class="header-anchor" href="#conditional-deletion" aria-hidden="true">#</a></h2><p>If you need to delete multiple records based on a condition, you can also use the <code>Delete</code> method, but with a predicate:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>OrderNumber <span class="token operator">==</span> <span class="token string">&quot;5678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this example, all <code>Order</code> records that have <code>&quot;5678&quot;</code> as their <code>OrderNumber</code> will be deleted.</p><h1 id="using-loadselect-and-related-model-code-attributes" tabindex="-1">Using LoadSelect and Related Model Code Attributes <a class="header-anchor" href="#using-loadselect-and-related-model-code-attributes" aria-hidden="true">#</a></h1><p>In real-world applications, it&#39;s quite common to deal with relationships between tables, like one-to-many or many-to-many relationships. OrmLite provides a set of <code>Load</code> prefixed methods to handle these relationships. These methods return the primary entity and populate its related entities.</p><p>For instance, to load an <code>Order</code> with its related <code>OrderLine</code>s, you can use the <code>LoadSelect</code> method:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orderWithLines <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadSelect</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this case, <code>LoadSelect</code> returns an <code>Order</code> object that also contains all the <code>OrderLine</code>s related to it. The relationship between <code>Order</code> and <code>OrderLine</code> is defined by the <code>ForeignKey</code> attribute:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderLine</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ForeignKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ProductName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>ForeignKey</code> attribute in the <code>OrderLine</code> class establishes that the <code>OrderId</code> property is a foreign key that relates to the <code>Order</code> table.</p><h1 id="high-level-features-when-integrated-with-servicestack" tabindex="-1">High-Level Features When Integrated with ServiceStack <a class="header-anchor" href="#high-level-features-when-integrated-with-servicestack" aria-hidden="true">#</a></h1><p>While ServiceStack.OrmLite works effectively as a standalone micro ORM, it offers even more when integrated within the ServiceStack ecosystem. In this context, OrmLite can be leveraged to facilitate high-level features of ServiceStack such as AutoQuery, Locode, and code-first model generation.</p><h2 id="autoquery-and-code-first-models" tabindex="-1">AutoQuery and Code First Models <a class="header-anchor" href="#autoquery-and-code-first-models" aria-hidden="true">#</a></h2><p>In a typical ServiceStack application, OrmLite is commonly used to create code-first models that form the basis for database operations. One key advantage of this is the seamless integration with AutoQuery, a ServiceStack feature that enables automated generation of optimized, queryable services for defined models.</p><p>Here&#39;s an example of defining a model and an AutoQuery request DTO:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Customer <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/orders&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryOrders</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="autoquery-and-database-first-approach" tabindex="-1">AutoQuery and Database First Approach <a class="header-anchor" href="#autoquery-and-database-first-approach" aria-hidden="true">#</a></h2><p>ServiceStack also supports a database-first approach, especially useful when working with an existing database. In this scenario, you can leverage AutoQuery&#39;s <code>GeneratedServices</code> feature. It allows you to create ready-to-use services based on your database schema.</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
    MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    GenerateCrudServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateCrudServices</span>
    <span class="token punctuation">{</span>
        AutoRegister <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="locode" tabindex="-1">Locode <a class="header-anchor" href="#locode" aria-hidden="true">#</a></h2><p>Locode is a built-in ServiceStack UI that provides an easy way to visualize, interact with your database and manage your data. When using OrmLite with AutoQuery, Locode can generate interfaces for your tables, enabling you to browse and manage your data.</p><h2 id="code-generation-with-servicestack-x-tool" tabindex="-1">Code Generation with ServiceStack &#39;x&#39; Tool <a class="header-anchor" href="#code-generation-with-servicestack-x-tool" aria-hidden="true">#</a></h2><p>If you start with a database-first approach using <code>GeneratedServices</code>, ServiceStack provides a smooth transition to a code-first approach when you&#39;re ready. Using the <code>x</code> dotnet tool, you can generate all POCO model classes, as well as AutoQuery CRUD Request DTOs, all from an existing database schema. The command for this is:</p><div class="language-bash"><pre><code>x csharp https://localhost:5001 <span class="token parameter variable">-path</span> /crud/all/csharp
</code></pre></div><p>This will create a set of C# files that contain classes representing each table in your database, as well as the CRUD Request DTOs. From there, you can start to manipulate these models in a code-first manner while still leveraging all the powerful features of ServiceStack and OrmLite.</p><h1 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h1><p>We&#39;ve journeyed through an introduction to ServiceStack.OrmLite, discussing its setup, basic usage, and how it can be used within a ServiceStack service. We&#39;ve explored the power of code-first models, various ways of querying, inserting, updating, and deleting data using OrmLite, and how to leverage LoadSelect to handle related model data.</p><p>We also touched on some high-level features provided by OrmLite when integrated with ServiceStack, including AutoQuery, Locode, and transitioning from a database-first to a code-first approach using the &#39;x&#39; dotnet tool.</p><p>The aim of this tutorial was to give you an understanding of the core concepts and capabilities of OrmLite and to demonstrate its potential as a reliable and efficient Micro ORM for your .NET projects. Whether used in a standalone context or as part of a wider ServiceStack application, OrmLite provides a lightweight, intuitive, and feature-rich data access solution.</p>`,160),p=[o];function c(r,i,l,u,d,k){return a(),s("div",null,p)}var g=n(t,[["render",c]]);export{m as __pageData,g as default};
