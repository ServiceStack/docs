import{_ as v}from"./chunks/servicestack.net-home-1440.5c70f723.js";import{I as l}from"./chunks/iconify.a8ebd219.js";import{f,o as s,c as n,F as d,K as m,d as a,A as h,E as b,e as p,u as i,a as r}from"./app.84d05c32.js";var y="/assets/markdown-email-form.4a6b28fc.png",x="/assets/markdown-email-custom-inputs.e21e8112.png",q="/assets/gptmeetingagents-screenshot.6438536f.png",A="/assets/diffusion-swr.d8a33e02.gif",_="/assets/xkcd-autohtml-code.96d8dc71.png",C="/assets/xkcd-search.9853a30e.png",I="/assets/xkcd-autoquerygrid.700763da.png",S="/assets/xkcd-datagrid.61cebb6d.png",T="/assets/xkcd-screenshot.d6933a90.png",P="/assets/jamstacks-screenshot.469dc52d.png",M="/assets/razor-ssg-videos.5f3c899d.png",z="/assets/razor-ssg-join-newsletter.94c3914a.png",j="/assets/razor-ssg-thread.eebb5f82.png";const N={key:0},V={class:"ml-6 flex items-center text-base leading-8"},E={class:"mr-1 text-slate-600","aria-hidden":"true",focusable:"false",role:"img",viewBox:"0 0 16 16",width:"16",height:"16",fill:"currentColor",style:{display:"inline-block","user-select":"none","vertical-align":"text-bottom",overflow:"visible"}},D=a("path",{d:"M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"},null,-1),G=[D],L={key:1},R={class:"ml-6"},F={class:"flex items-center text-base leading-8"},U={class:"mr-1 text-slate-600","aria-hidden":"true",focusable:"false",role:"img",viewBox:"0 0 12 12",width:"12",height:"12",fill:"currentColor",style:{display:"inline-block","user-select":"none","vertical-align":"text-bottom",overflow:"visible"}},B=a("path",{d:"M6 8.825c-.2 0-.4-.1-.5-.2l-3.3-3.3c-.3-.3-.3-.8 0-1.1.3-.3.8-.3 1.1 0l2.7 2.7 2.7-2.7c.3-.3.8-.3 1.1 0 .3.3.3.8 0 1.1l-3.2 3.2c-.2.2-.4.3-.6.3Z"},null,-1),W=[B],Q={class:"mr-1 text-sky-500","aria-hidden":"true",focusable:"false",role:"img",viewBox:"0 0 16 16",width:"16",height:"16",fill:"currentColor",style:{display:"inline-block","user-select":"none","vertical-align":"text-bottom",overflow:"visible"}},K=a("path",{d:"M.513 1.513A1.75 1.75 0 0 1 1.75 1h3.5c.55 0 1.07.26 1.4.7l.9 1.2a.25.25 0 0 0 .2.1H13a1 1 0 0 1 1 1v.5H2.75a.75.75 0 0 0 0 1.5h11.978a1 1 0 0 1 .994 1.117L15 13.25A1.75 1.75 0 0 1 13.25 15H1.75A1.75 1.75 0 0 1 0 13.25V2.75c0-.464.184-.91.513-1.237Z"},null,-1),H=[K],w=f({__name:"FileLayoutFile",props:{label:null,contents:null,depth:null},setup(t){return(g,e)=>(s(),n("div",null,[t.label=="_"?(s(),n("div",N,[(s(!0),n(d,null,m(t.contents,o=>(s(),n("div",V,[(s(),n("svg",E,G)),a("span",null,h(o),1)]))),256))])):(s(),n("div",L,[a("div",R,[a("div",F,[(s(),n("svg",U,W)),(s(),n("svg",Q,H)),a("span",null,h(t.label),1)]),(s(!0),n(d,null,m(t.contents,(o,c)=>(s(),b(w,{label:`${c}`,contents:o},null,8,["label","contents"]))),256))])]))]))}}),u=f({__name:"FileLayout",props:{files:null},setup(t){return(g,e)=>(s(),n("div",null,[(s(!0),n(d,null,m(t.files,(o,c)=>(s(),b(w,{label:`${c}`,contents:o},null,8,["label","contents"]))),256))]))}}),X=a("link",{rel:"stylesheet",href:"/css/not-prose.css"},null,-1),O=a("link",{rel:"stylesheet",href:"/css/release.css"},null,-1),$={class:"mb-20"},J={class:"flex mx-auto justify-center items-center"},Z=r(`<p>Our focus in this release was higher up the value chain with improvements across our existing templates, component libraries, new examples of utilizing ServiceStack features to quickly handle real-world tasks, existing templates for rapidly develop Admin UIs, developing responsive high-performance Apps with Razor SSG, easily enhance existing static websites with dynamic features powered by our new self-hosting CreatorKit App and an update on our exciting progress on a new ServiceStack GPT plugin for creating ChatGPT agents knowledge to invoke System APIs to accomplish specified tasks.</p><p>First up, we&#39;re excited to announce the availability of:</p><figure id="creatorkit" class="py-8"><a class="my-8 max-w-3xl mx-auto block" href="https://servicestack.net/creatorkit/"><img class="" src="https://servicestack.net/img/pages/creatorkit/creatorkit-brand.svg" alt=""></a></figure><p><a href="https://servicestack.net/creatorkit/" target="_blank" rel="noopener noreferrer">CreatorKit</a> is a simple, customizable, self-hostable alternative solution to using Mailchimp for managing an organization&#39;s mailing lists, accepting newsletter subscriptions, defining customizable email layouts and templates and sending rich HTML emails to your Customers and subscribers using your preferred SMTP provider.</p><p>It also provides a private alternative to using Disqus to enhance websites with a threading and commenting system on your preferred blog posts and website pages that you want to be able to connect with your community on.</p><div class="not-prose bg-white py-12"><div class="mx-auto max-w-7xl px-6 lg:px-8"><div class="mx-auto max-w-2xl sm:text-center"><h2 class="text-base font-semibold leading-7 text-indigo-600">Everything you need</h2><p class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl"> Grow your on-site community </p><p class="mt-6 text-lg leading-8 text-gray-600"> CreatorKit offers all the tools you need to reach and retain users, from managing subscriber mailing lists to moderating a feature-rich comments system </p></div></div><div class="relative overflow-hidden pt-16"><div class="mx-auto max-w-7xl px-6 lg:px-8"><a href="https://servicestack.net/creatorkit/install"><img src="https://servicestack.net/img/pages/creatorkit/portal.png" alt="App screenshot" class="mb-[-12%] rounded-xl shadow-2xl ring-1 ring-gray-900/10" width="2432" height="1442"></a><div class="relative" aria-hidden="true"><div class="absolute -inset-x-20 bottom-0 bg-gradient-to-t from-white pt-[7%]"></div></div></div></div><div class="mx-auto mt-16 max-w-7xl px-6 sm:mt-20 md:mt-24 lg:px-8"><dl class="mx-auto grid max-w-2xl grid-cols-1 gap-x-6 gap-y-10 text-base leading-7 text-gray-600 sm:grid-cols-2 lg:mx-0 lg:max-w-none lg:grid-cols-3 lg:gap-x-8 lg:gap-y-16"><div class="relative pl-9"><dt class="inline font-semibold text-gray-900"><svg class="absolute left-1 top-1 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path fill="currentColor" d="M9 2a4 4 0 1 0 0 8a4 4 0 0 0 0-8Zm-4.991 9A2.001 2.001 0 0 0 2 13c0 1.691.833 2.966 2.135 3.797C5.417 17.614 7.145 18 9 18v-5a2 2 0 0 1 1.996-2H4.009Zm10.5 4.927l-4.496-2.623A1.5 1.5 0 0 1 11.5 12h6a1.5 1.5 0 0 1 1.5 1.5v.009l-4.49 2.418Zm.228 1.013L19 14.645V17.5a1.5 1.5 0 0 1-1.5 1.5h-6a1.5 1.5 0 0 1-1.5-1.5v-3.046l4.248 2.478a.5.5 0 0 0 .49.008Z"></path></svg> Mailing List Subscriptions. </dt><dd class="inline">Collect and manage subscribers for your Newsletters and other Contact Mailing Lists.</dd></div><div class="relative pl-9"><dt class="inline font-semibold text-gray-900"><svg class="absolute left-1 top-1 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1zm0 8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1zm10-1h6m-6 4h6m-6 4h6"></path></svg> Email Templates. </dt><dd class="inline"> Create email templates utilizing a powerful <a class="text-indigo-600 hover:underline" href="https://sharpscript.net" target="_blank">#Script</a> .NET templating system with layouts, partials &amp; live previews. </dd></div><div class="relative pl-9"><dt class="inline font-semibold text-gray-900"><svg class="absolute left-1 top-1 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M10 20q-.425 0-.713-.288T9 19v-5q-2.075 0-3.538-1.463T4 9q0-2.075 1.463-3.538T9 4h8q.425 0 .713.288T18 5q0 .425-.288.713T17 6h-1v13q0 .425-.288.713T15 20q-.425 0-.713-.288T14 19V6h-3v13q0 .425-.288.713T10 20Z"></path></svg> Rich Emails. </dt><dd class="inline"> Send plain-text or rich HTML emails with built-in Markdown editor, save email drafts and preview generated emails. </dd></div><div class="relative pl-9"><dt class="inline font-semibold text-gray-900"><svg class="absolute left-1 top-1 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m7 12l5 5l-1.5 1.5a3.536 3.536 0 1 1-5-5L7 12zm10 0l-5-5l1.5-1.5a3.536 3.536 0 1 1 5 5L17 12zM3 21l2.5-2.5m13-13L21 3m-11 8l-2 2m5 1l-2 2"></path></svg> Simple Integrations. </dt><dd class="inline"> Effortlessly integrate beautiful Tailwind Components into your existing site with simple, customizable progressive markup </dd></div><div class="relative pl-9"><dt class="inline font-semibold text-gray-900"><svg class="absolute left-1 top-1 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M8.27 3L3 8.27v7.46L8.27 21h7.46C17.5 19.24 21 15.73 21 15.73V8.27L15.73 3M9.1 5h5.8L19 9.1v5.8L14.9 19H9.1L5 14.9V9.1m6 5.9h2v2h-2v-2m0-8h2v6h-2V7"></path></svg> Content Moderation. </dt><dd class="inline"> Moderation tools for deleting or flagging unwanted comments, action reported comments by temporarily or permanent banning repeat offenders </dd></div><div class="relative pl-9"><dt class="inline font-semibold text-gray-900"><svg class="absolute left-1 top-1 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path fill="currentColor" d="M16 2h4v15a3 3 0 0 1-3 3H3a3 3 0 0 1-3-3V0h16v2zm0 2v13a1 1 0 0 0 1 1a1 1 0 0 0 1-1V4h-2zM2 2v15a1 1 0 0 0 1 1h11.17a2.98 2.98 0 0 1-.17-1V2H2zm2 8h8v2H4v-2zm0 4h8v2H4v-2zM4 4h8v4H4V4z"></path></svg> Newsletter generation. </dt><dd class="inline"> Save time with automatic Newsletter generation from including new content added to your static <a class="text-indigo-600 hover:underline" href="https://razor-ssg.web-templates.io/posts/razor-ssg" target="_blank">Razor SSG</a> websites. </dd></div></dl></div><div class="px-6 py-24 sm:px-6 sm:py-32 lg:px-8"><div class="mx-auto max-w-2xl text-center"><h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl"> Start capturing your audience&#39;s engagement. </h2><p class="mx-auto mt-6 max-w-xl text-lg leading-8 text-gray-600"> Download, customize CreatorKit to your brand and start building an engaged community around your website content today! </p><div class="mt-10 flex items-center justify-center gap-x-6"><a href="https://servicestack.net/creatorkit/install" class="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold !text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Get started</a></div></div></div></div><h3 id="enhance-static-websites" tabindex="-1">Enhance static websites <a class="header-anchor" href="#enhance-static-websites" aria-hidden="true">#</a></h3><p>We&#39;re developing CreatorKit as an ideal companion for JAMStack or statically generated branded websites like <a href="https://razor-ssg.web-templates.io/posts/razor-ssg" target="_blank" rel="noopener noreferrer">Razor SSG</a> enabling you to seamlessly integrate features such as newsletter subscriptions, email management, comments, voting, and moderation into your existing websites without the complexity of a custom solution.</p><p>It&#39;s ideally suited for Websites who want to keep all Mailing Lists Contacts and Authenticated User Comments in a different, private self-hosted site, isolated from your existing Customer Accounts and internal Systems.</p><p>With CreatorKit, you can enjoy the convenience of managing your blog&#39;s comments, votes, and subscriptions directly from your own hosted <a href="https://creatorkit.netcore.io/portal/" target="_blank" rel="noopener noreferrer">CreatorKit Portal</a> without needing to rely on complex content management systems to manage your blog&#39;s interactions with your readers.</p><p>Additionally, CreatorKit makes it easy to send emails and templates to different mailing lists, making it the perfect tool for managing your email campaigns. Whether you&#39;re a blogger, marketer, or entrepreneur, CreatorKit is a great solution for maximizing your blog&#39;s functionality and engagement.</p><h3 id="creatorkit-features" tabindex="-1">CreatorKit Features <a class="header-anchor" href="#creatorkit-features" aria-hidden="true">#</a></h3><p>The CreatorKit Portal offers a complete management UI to manage mailing lists, email newsletter and marketing campaigns, thread management and moderation workflow.</p><h3 id="email-management" tabindex="-1">Email Management <a class="header-anchor" href="#email-management" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-messages"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-messages.png" alt=""></a></figure><h3 id="optimized-email-ui-s-with-live-previews" tabindex="-1">Optimized Email UI&#39;s with Live Previews <a class="header-anchor" href="#optimized-email-ui-s-with-live-previews" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-messages#email-ui"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-messages-simple.png" alt=""></a></figure><h3 id="custom-html-templates" tabindex="-1">Custom HTML Templates <a class="header-anchor" href="#custom-html-templates" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-messages#sending-custom-html-emails"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-messages-custom.png" alt=""></a></figure><h3 id="html-email-templates" tabindex="-1">HTML Email Templates <a class="header-anchor" href="#html-email-templates" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-messages#sending-html-markdown-emails"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-messages-markdown.png" alt=""></a></figure><h3 id="mailing-list-email-runs" tabindex="-1">Mailing List Email Runs <a class="header-anchor" href="#mailing-list-email-runs" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-mailruns"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-mailrun-custom.png" alt=""></a></figure><h3 id="newsletter-generation" tabindex="-1">Newsletter Generation <a class="header-anchor" href="#newsletter-generation" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-mailruns#generating-newsletters"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-mailrun-newsletter.png" alt=""></a></figure><h3 id="comment-moderation" tabindex="-1">Comment Moderation <a class="header-anchor" href="#comment-moderation" aria-hidden="true">#</a></h3><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-posts"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/pages/creatorkit/portal-report.png" alt=""></a></figure><h3 id="creatorkit-docs" tabindex="-1">CreatorKit Docs <a class="header-anchor" href="#creatorkit-docs" aria-hidden="true">#</a></h3><p>Checkout CreatorKit docs for more information about CreatorKit features and whether its features make sense for your existing websites:</p><div class="my-8 flex justify-center"><a class="text-3xl text-indigo-600 hover:text-indigo-800" href="https://servicestack.net/creatorkit/">https://servicestack.net/creatorkit/</a></div><p>To get started follow the <a href="https://servicestack.net/creatorkit/install" target="_blank" rel="noopener noreferrer">installation instructions</a> to download and configure it with your organization&#39;s website settings.</p><h3 id="future" tabindex="-1">Future <a class="header-anchor" href="#future" aria-hidden="true">#</a></h3><p>As we&#39;re using CreatorKit ourselves to power all dynamic Mailing List and Comment System features on <a href="servicestack.net">https://servicestack.net</a>, we&#39;ll be continuing to develop it with useful features to empower static websites with more generic email templates and potential to expand it with commerce features, inc. Stripe integration, products &amp; subscriptions, ordering system, invoicing, quotes, PDF generation, etc.</p><p>As a design goal <a href="https://servicestack.net/creatorkit/components" target="_blank" rel="noopener noreferrer">CreatorKit&#39;s components</a> will be easily embeddable into any external website, where it will be integrated into the <a href="https://servicestack.net/posts/razor-ssg" target="_blank" rel="noopener noreferrer">Razor SSG</a> project template to serve as a working demonstration and reference implementation. As such it&#39;s a great option if you&#39;re looking to create a Fast, FREE, CDN hostable, <a href="https://servicestack.net/posts/javascript" target="_blank" rel="noopener noreferrer">simple, modern</a> statically generated website created with Razor &amp; Markdown like <a href="https://github.com/ServiceStack/servicestack.net" target="_blank" rel="noopener noreferrer">ServiceStack/servicestack.net</a>.</p><h3 id="feedback-welcome" tabindex="-1">Feedback welcome <a class="header-anchor" href="#feedback-welcome" aria-hidden="true">#</a></h3><p>If you&#39;d like to prioritize features you&#39;d like to see first or propose new, generically useful features for static websites, please let us know in <a href="https://servicestack.net/ideas" target="_blank" rel="noopener noreferrer">servicestack.net/ideas</a>.</p><h2 id="markdown-editor-input" tabindex="-1">Markdown Editor Input <a class="header-anchor" href="#markdown-editor-input" aria-hidden="true">#</a></h2><p>The CreatorKit Portal also makes use of several new Vue Components we&#39;re excited to share, starting with the new <code>&lt;MarkdownInput&gt;</code> component for providing a rich Markdown Textarea Input to capture rich formatted text in Markdown with icons for markdown&#39;s popular formatting options and convenience keyboard bindings for a pleasant intuitive authoring experience.</p><p>It behaves like all other Input components which you can embed in custom UIs as a standard Vue Component:</p><div class="language-ts"><pre><code><span class="token operator">&lt;</span>MarkdownInput id<span class="token operator">=</span><span class="token string">&quot;body&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;request.body&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div><h4 id="markdowninput-properties" tabindex="-1">MarkdownInput Properties <a class="header-anchor" href="#markdowninput-properties" aria-hidden="true">#</a></h4><p>Which offers a number of properties to customize its appearance and behavior:</p><div class="language-ts"><pre><code><span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span>
    status<span class="token operator">?</span><span class="token operator">:</span> ResponseStatus<span class="token operator">|</span><span class="token keyword">null</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span>
    inputClass<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    label<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    labelClass<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    help<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    placeholder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    modelValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>

    counter<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    rows<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
    errorMessages<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    lang<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    autoFocus<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    disabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    helpUrl<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    hide<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span>MarkdownInputOptions<span class="token operator">|</span>MarkdownInputOptions<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token class-name">MarkdownInputOptions</span> <span class="token operator">=</span> <span class="token string">&quot;bold&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;italics&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;link&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;image&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;blockquote&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;code&quot;</span> 
  <span class="token operator">|</span> <span class="token string">&quot;heading&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;orderedList&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;unorderedList&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;strikethrough&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;undo&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;redo&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;help&quot;</span>
</code></pre></div><p>Just like other Input components it can also be annotated on Request DTO string properties to change which Input component it should use in <a href="https://servicestack.net/vue/gallery/autoform" target="_blank" rel="noopener noreferrer">AutoForm components</a>, where it can be further customized with tailwind classes on its containing Field and Textarea Input elements, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarkdownEmail</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;MarkdownInput&quot;</span><span class="token punctuation">,</span> Label<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field<span class="token operator">=</span><span class="token string">&quot;col-span-12&quot;</span><span class="token punctuation">,</span> Input<span class="token operator">=</span><span class="token string">&quot;h-56&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Body <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which is how all CreatorKit&#39;s Markdown Email Forms used to generate their UIs, e.g:</p><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-messages#sending-html-markdown-emails"><img class="rounded shadow hover:shadow-lg" src="`+y+`" alt=""></a></figure><p>Which was generated using a customized <code>&lt;AutoCreateForm&gt;</code> component that&#39;s been enhanced to include an <code>&lt;EmailPreview&gt;</code> component to provide live HTML Email previews as-you-type:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoCreateForm</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectedOp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectedOp?.name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@save</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>save<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@done</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>done<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ model }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EmailPreview</span> <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectedOp?.name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AutoCreateForm</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Which was generated from its declarative Request DTO definition:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Markdown Email&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarkdownEmail</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">CreateEmailBase</span><span class="token punctuation">,</span> <span class="token class-name">IPost</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>MailMessage<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field <span class="token operator">=</span> <span class="token string">&quot;col-span-12&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Subject <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;MarkdownEmailInput&quot;</span><span class="token punctuation">,</span> Label<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field<span class="token operator">=</span><span class="token string">&quot;col-span-12&quot;</span><span class="token punctuation">,</span> Input<span class="token operator">=</span><span class="token string">&quot;h-56&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Body <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> Draft <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CreateEmailBase</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;EmailInput&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field <span class="token operator">=</span> <span class="token string">&quot;col-span-6 lg:col-span-3&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field <span class="token operator">=</span> <span class="token string">&quot;col-span-6 lg:col-span-3&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The keen eyes among you may have noticed that the <code>Body</code> property references a <code>MarkdownEmailInput</code> component that&#39;s different from <code>MarkdownInput</code> and a never seen before <code>EmailInput</code> component, which brings us to our next feature...</p><h2 id="custom-declarative-input-components" tabindex="-1">Custom Declarative Input Components <a class="header-anchor" href="#custom-declarative-input-components" aria-hidden="true">#</a></h2><p>Where AutoForm components bound to your declarative Request DTOs are no longer limited to the Input Components in the <a href="https://servicestack.net/vue/" target="_blank" rel="noopener noreferrer">Vue Component Library</a> as they can now reference your own Input components instead!</p><p>The AutoForm components and rapid development workflow enabled by <a href="https://servicestack.net/locode/" target="_blank" rel="noopener noreferrer">Locode&#39;s Auto UIs</a> can put us in a tough spot at times where you want to deliver the most optimal UX but you don&#39;t want to leave the high productivity of Auto UI and Auto Form components to go back to creating manual forms.</p><p>Which we found ourselves in when developing CreatorKit where we want users to be able to quickly develop custom Email Templates and UIs, but not have to put in the effort to get the great UX we&#39;re used to when creating emails. For example we could&#39;ve used the default <a href="https://servicestack.net/vue/gallery/autoform#edit-form" target="_blank" rel="noopener noreferrer">LookupInput</a> that&#39;s inferred and rendered for <a href="https://servicestack.net/vue/gallery/autoquerygrid#reference-fields" target="_blank" rel="noopener noreferrer">Reference Fields</a>, but that would require opening a modal form to search through existing contacts every time we wanted to send an email.</p><p>But gmail have already showed us it&#39;s much more user-friendly and quicker to provide a non-modal autocomplete dropdown that automatically searches our contact list as we type, which is what we ended up doing, without giving up the productivity of our validation-bound API Forms, by registering our custom <code>EmailInput</code> component with the Vue Component Library in <a href="https://github.com/NetCoreApps/CreatorKit/blob/main/CreatorKit/wwwroot/mjs/app.mjs" target="_blank" rel="noopener noreferrer">app.mjs</a>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> ServiceStackVue<span class="token punctuation">,</span> <span class="token punctuation">{</span> useAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>
<span class="token comment">//...</span>

ServiceStackVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;EmailInput&#39;</span><span class="token punctuation">,</span> EmailInput<span class="token punctuation">)</span>
ServiceStackVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MarkdownEmailInput&#39;</span><span class="token punctuation">,</span> MarkdownEmailInput<span class="token punctuation">)</span>
</code></pre></div><h3 id="emailinput" tabindex="-1">EmailInput <a class="header-anchor" href="#emailinput" aria-hidden="true">#</a></h3><p>That registers the custom <code>EmailInput</code> and <code>MarkdownEmailInput</code> components defined in <a href="https://github.com/NetCoreApps/CreatorKit/blob/main/CreatorKit/wwwroot/mjs/components/Inputs.mjs" target="_blank" rel="noopener noreferrer">Inputs.mjs</a></p><p>Where we can see that <code>&lt;EmailInput&gt;</code> is a customized <code>&lt;TextInput&gt;</code> with an added <code>SelectEmail</code> component that&#39;s used to display the Autocomplete email dropdown:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> EmailInput <span class="token operator">=</span> <span class="token punctuation">{</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span> SelectEmail <span class="token punctuation">}</span><span class="token punctuation">,</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;TextInput v-bind=&quot;$attrs&quot; @update:modelValue=&quot;$emit(&#39;update:modelValue&#39;,$event)&quot;&gt;
      &lt;template #footer=&quot;{ id, inputElement, modelValue }&quot;&gt;
        &lt;SelectEmail v-if=&quot;inputElement&quot; :inputElement=&quot;inputElement&quot; :modelValue=&quot;modelValue&quot; /&gt;
      &lt;/template&gt;
    &lt;/TextInput&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="markdownemailinput" tabindex="-1">MarkdownEmailInput <a class="header-anchor" href="#markdownemailinput" aria-hidden="true">#</a></h3><p>Whilst <code>&lt;MarkdownEmailInput&gt;</code> is a customized <code>&lt;MarkdownInput&gt;</code> that&#39;s been extended with an additional <a href="https://servicestack.net/creatorkit/portal-messages#template-variables" target="_blank" rel="noopener noreferrer">Insert Template Variables button</a> that enables quick access for users to discover and insert user-defined <a href="https://servicestack.net/creatorkit/customize#template-variables" target="_blank" rel="noopener noreferrer">Template Variables</a>:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> MarkdownEmailInput <span class="token operator">=</span> <span class="token punctuation">{</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span> InsertVariableButton <span class="token punctuation">}</span><span class="token punctuation">,</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;MarkdownInput v-bind=&quot;$attrs&quot; @update:modelValue=&quot;$emit(&#39;update:modelValue&#39;,$event)&quot;&gt;
      &lt;template #toolbarbuttons=&quot;{ instance, textarea }&quot;&gt;
        &lt;InsertVariableButton :instance=&quot;instance&quot; :textarea=&quot;textarea&quot; /&gt;
      &lt;/template&gt;
    &lt;/MarkdownInput&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where they&#39;re effortlessly used together to deliver a great, optimal UX in all Markdown Email Forms:</p><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto block" href="https://servicestack.net/creatorkit/portal-messages#sending-html-markdown-emails"><img class="rounded shadow hover:shadow-lg" src="`+x+`" alt=""></a></figure><h3 id="autoform-components-everywhere" tabindex="-1">AutoForm Components Everywhere <a class="header-anchor" href="#autoform-components-everywhere" aria-hidden="true">#</a></h3><p>This feature has given AutoForm components all the flexibility needed to be able to deliver a great, optimal experience without sacrificing the high-productivity of ServiceStack&#39;s validation-bound Auto UIs and API Form components, as a result CreatorKit was able to continue to use AutoForm components for all 17 of its API Forms.</p><h2 id="build-admin-uis-fast" tabindex="-1">Build Admin UIs, Fast <a class="header-anchor" href="#build-admin-uis-fast" aria-hidden="true">#</a></h2><p><img src="https://images.unsplash.com/photo-1667906962043-a3e82dea23a3?crop=entropy&amp;fit=crop&amp;h=1000&amp;w=2000" alt=""></p><p>Another high-productivity Vue Component available in this release is <code>&lt;SidebarLayout&gt;</code> which has been invaluable in being able to rapidly create custom Admin UIs.</p><p>As we use <a href="https://servicestack.net/autoquery" target="_blank" rel="noopener noreferrer">AutoQuery</a> to develop most new APIs we often lean on Locode&#39;s instant Auto Admin UI at the start of every project to manage backend RDBMS tables freeing, us to focus most of our efforts on the user-facing features adding the most value.</p><p>This was also the case for <a href="https://servicestack.net/creatorkit/" target="_blank" rel="noopener noreferrer">CreatorKit</a> where its <a href="https://docs.servicestack.net/locode/" target="_blank" rel="noopener noreferrer">Locode</a> Admin UI:</p><div class="not-prose my-8"><a href="https://creatorkit.netcore.io/locode/" class="max-w-4xl"><div class="block flex justify-center shadow hover:shadow-lg rounded overflow-hidden"><img src="https://servicestack.net/img/posts/admin-ui/locode-admin-ui.png"></div></a></div><p>Which was sufficient enough to develop CreatorKit&#39;s <a href="https://servicestack.net/creatorkit/components" target="_blank" rel="noopener noreferrer">embeddable Tailwind Components</a>, however as the Admin Portal itself makes up a significant part of the user-facing value proposition in CreatorKit, we ultimately decided to develop a Custom UI for its Admin Portal in order to gain complete control of its UX and freedom to create the optimized UI we want to in future.</p><p>Adopting a <a href="https://servicestack.net/posts/javascript" target="_blank" rel="noopener noreferrer">Simple, Modern JavaScript</a> approach free of build tools complexity with the instant live reload of a simple static <a href="https://github.com/NetCoreApps/CreatorKit/blob/main/CreatorKit/wwwroot/portal/index.html" target="_blank" rel="noopener noreferrer">index.html</a> yielded the most productive workflow, combined with all <a href="https://docs.servicestack.net/releases/v6_7#new-locode-api-explorer-admin-uis-now-in-vue-3" target="_blank" rel="noopener noreferrer">built-in UIs having been rebuilt</a> in reusable Vue 3 components meant we were able to replicate most of Locode&#39;s functionality into a customizable Vue App in no time!</p><div class="not-prose bg-white pb-8"><div class="relative overflow-hidden pt-8"><div class="mx-auto max-w-7xl px-6"><a href="creatorkit/"><img src="https://servicestack.net/img/pages/creatorkit/portal.png" alt="App screenshot" class="mb-[-12%] rounded-xl shadow-2xl ring-1 ring-gray-900/10" width="2432" height="1442"></a><div class="relative" aria-hidden="true">t <div class="absolute -inset-x-20 bottom-0 bg-gradient-to-t from-white pt-[7%]"></div></div></div></div></div><h3 id="sidebarlayout-vue-component" tabindex="-1">SidebarLayout Vue Component <a class="header-anchor" href="#sidebarlayout-vue-component" aria-hidden="true">#</a></h3><p>So much so that we believe this is a great progressive option for others needing to move beyond Locode or looking to create their own customizable Admin UI. To minimize the effort we&#39;ve encapsulated Tailwind&#39;s Responsive <a href="https://tailwindui.com/components/application-ui/navigation/sidebar-navigation" target="_blank" rel="noopener noreferrer">Sidebar Navigation</a> into a reusable <code>&lt;SidebarLayout&gt;</code> Vue 3 component and upgraded the <a href="https://vue-mjs.web-templates.io" target="_blank" rel="noopener noreferrer">vue-mjs</a> project template to include both a Razor Pages <a href="https://vue-mjs.web-templates.io/admin" target="_blank" rel="noopener noreferrer">server rendered Admin UI</a>:</p><div class="not-prose my-8"><a href="https://vue-mjs.web-templates.io/admin" class="max-w-4xl"><div class="block flex justify-center shadow hover:shadow-lg rounded overflow-hidden"><img src="https://servicestack.net/img/posts/admin-ui/server-admin-ui.png"></div></a></div><p>As well as a <a href="https://vue-mjs.web-templates.io/portal/" target="_blank" rel="noopener noreferrer">client rendered Admin UI</a> created from a single static <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/portal/index.html" target="_blank" rel="noopener noreferrer">index.html</a></p><div class="not-prose my-8"><a href="https://vue-mjs.web-templates.io/portal/" class="max-w-4xl"><div class="block flex justify-center shadow hover:shadow-lg rounded overflow-hidden"><img src="https://servicestack.net/img/posts/admin-ui/client-admin-ui.png"></div></a></div><p>We&#39;ll quickly go through how we can easily extend each layout to with new pages and AutoQueryGrid components to manage new tables.</p><h2 id="client-admin-ui" tabindex="-1">Client Admin UI <a class="header-anchor" href="#client-admin-ui" aria-hidden="true">#</a></h2><p>The customizable UI is maintained within a single JS Object literal that defines all the sections in the Admin UI. Each section defines the Menu Item on the Sidebar, the Title of the Page and the Vue 3 component body to display when selected:</p><div class="language-js"><pre><code><span class="token keyword">const</span> sections <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">Dashboard</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;svg fill=&quot;none&quot;&gt;...&lt;/svg&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
            &lt;div&gt;
              &lt;dl class=&quot;mt-5 grid grid-cols-1 gap-5 sm:grid-cols-3&quot;&gt;
                &lt;div v-for=&quot;stat in stats&quot; @click=&quot;$emit(&#39;nav&#39;,stat.label)&quot; class=&quot;...&quot;&gt;
                  &lt;dt class=&quot;...&quot;&gt;Total {{humanize(stat.label)}}&lt;/dt&gt;
                  &lt;dd class=&quot;...&quot;&gt;{{formatNumber(stat.total)}}&lt;/dd&gt;
                &lt;/div&gt;
              &lt;/dl&gt;
            &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
         <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            client<span class="token punctuation">.</span><span class="token function">swr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AdminData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">r</span> <span class="token operator">=&gt;</span> stats<span class="token punctuation">.</span>value <span class="token operator">=</span> r<span class="token punctuation">.</span>response<span class="token operator">?.</span>pageStats <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> <span class="token function-variable function">formatNumber</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>NumberFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> stats<span class="token punctuation">,</span> humanize<span class="token punctuation">,</span> formatNumber <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">Bookings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Booking&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; 
            selected-columns=&quot;id,name,roomType,roomNumber,bookingStartDate,cost,couponId,discount&quot;
            :header-titles=&quot;{ roomNumber:&#39;Room No&#39;, bookingStartDate:&#39;Start Date&#39;, couponId:&#39;Coupon&#39; }&quot;
            :visible-from=&quot;{ roomNumber:&#39;lg&#39;, cost:&#39;md&#39;, couponId:&#39;xl&#39;, discount:&#39;never&#39; }&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">Coupons</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Coupon&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> 
</code></pre></div><p>Each section can use optional properties to customize their appearance with the properties below:</p><ul><li><code>icon</code> - SVG Icon to use in the Sidebar Menu Item</li><li><code>type</code> - Metadata <strong>Type</strong> to use to populate icon or reference in component</li><li><code>label</code> - The label of the menu item on the Sidebar</li><li><code>title</code> - The Title of the page</li><li><code>group</code> - The Sidebar group where the menu item should be displayed in</li><li><code>component</code> - The page&#39;s Vue 3 component body</li></ul><p>All properties except for <code>component</code> are optional, defaulting to the section name and default icon when not provided.</p><p>The above example creates an Admin UI with 3 different types of pages:</p><ul><li>A custom component to display the Dashboard</li><li>A customized responsive AutoQueryGrid to manage Bookings</li><li>A default AutoQueryGrid to manage Coupons</li></ul><p>Most of the time you&#39;ll just need to use the default AutoQueryGrid to enable a CRUD UI to manage your RDBMS tables.</p><div class="not-prose my-8"><a href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/wwwroot/portal/index.html" class="max-w-4xl"><div class="block flex justify-center shadow hover:shadow-lg rounded overflow-hidden"><img src="https://servicestack.net/img/posts/admin-ui/vuediffusion-admin-ui.png"></div></a></div><p>Which was all that was needed to render <a href="https://diffusion.works" target="_blank" rel="noopener noreferrer">Vue Diffusion&#39;s</a> Admin UI:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> sections <span class="token operator">=</span> <span class="token punctuation">{</span>
     Dashboard<span class="token operator">:</span> <span class="token punctuation">{</span>
         icon<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;svg&gt;...&lt;/svg&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span>
             template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
             &lt;div&gt;
               &lt;dl class=&quot;...&quot;&gt;
                 &lt;div v-for=&quot;stat in stats&quot; @click=&quot;$emit(&#39;nav&#39;,stat.label)&quot; class=&quot;...&quot;&gt;
                   &lt;dt class=&quot;...&quot;&gt;Total {{humanize(stat.label)}}&lt;/dt&gt;
                   &lt;dd class=&quot;...&quot;&gt;{{formatNumber(stat.total)}}&lt;/dd&gt;
                 &lt;/div&gt;
               &lt;/dl&gt;
             &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
             <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                 client<span class="token punctuation">.</span><span class="token function">swr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AdminData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">=&gt;</span> stats<span class="token punctuation">.</span>value <span class="token operator">=</span> r<span class="token punctuation">.</span>response<span class="token operator">?.</span>pageStats <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                 <span class="token keyword">const</span> <span class="token function-variable function">formatNumber</span> <span class="token operator">=</span> value <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Intl</span><span class="token punctuation">.</span><span class="token function">NumberFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
                 <span class="token keyword">return</span> <span class="token punctuation">{</span> stats<span class="token punctuation">,</span> humanize<span class="token punctuation">,</span> formatNumber <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     Creatives<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;Creative&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     Artists<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;Artist&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     Modifiers<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;Modifier&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     CreativeArtists<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;CreativeArtist&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     CreativeModifiers<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;CreativeModifier&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     Artifacts<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;Artifact&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     ArtifactLikes<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;ArtifactLike&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     ArtifactComments<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;ArtifactComment&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     ArtifactCommentVotes<span class="token operator">:</span> <span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">&#39;ArtifactCommentVote&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     Albums<span class="token operator">:</span> <span class="token punctuation">{</span>
         group<span class="token operator">:</span> <span class="token string">&#39;Albums&#39;</span><span class="token punctuation">,</span>
         type<span class="token operator">:</span> <span class="token string">&#39;Album&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     AlbumArtifacts<span class="token operator">:</span> <span class="token punctuation">{</span>
         group<span class="token operator">:</span> <span class="token string">&#39;Albums&#39;</span><span class="token punctuation">,</span>
         type<span class="token operator">:</span> <span class="token string">&#39;AlbumArtifact&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     AlbumLikes<span class="token operator">:</span> <span class="token punctuation">{</span>
         group<span class="token operator">:</span> <span class="token string">&#39;Albums&#39;</span><span class="token punctuation">,</span>
         type<span class="token operator">:</span> <span class="token string">&#39;AlbumLike&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     ArtifactStats<span class="token operator">:</span> <span class="token punctuation">{</span>
         group<span class="token operator">:</span> <span class="token string">&#39;Analytics&#39;</span><span class="token punctuation">,</span>
         type<span class="token operator">:</span> <span class="token string">&#39;ArtifactStat&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     SearchStats<span class="token operator">:</span> <span class="token punctuation">{</span>
         group<span class="token operator">:</span> <span class="token string">&#39;Analytics&#39;</span><span class="token punctuation">,</span>
         type<span class="token operator">:</span> <span class="token string">&#39;SearchStat&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     Signups<span class="token operator">:</span> <span class="token punctuation">{</span>
         group<span class="token operator">:</span> <span class="token string">&#39;Analytics&#39;</span><span class="token punctuation">,</span>
         type<span class="token operator">:</span> <span class="token string">&#39;Signup&#39;</span><span class="token punctuation">,</span>
         component<span class="token operator">:</span> <span class="token punctuation">{</span> template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;AutoQueryGrid :type=&quot;type&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
</code></pre></div><h3 id="server-admin-ui" tabindex="-1">Server Admin UI <a class="header-anchor" href="#server-admin-ui" aria-hidden="true">#</a></h3><p>For developers preferring to develop Server rendered Web Apps the <strong>vue-mjs</strong> project template also includes a Multi Page App (MPA) Razor Pages &amp; Vue App which defines the Admin Sections in the custom C# <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/_Layout.cshtml" target="_blank" rel="noopener noreferrer">Admin/_Layout.cshtml</a></p><div class="language-csharp"><pre><code> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> label<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> href<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> icon<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sections <span class="token operator">=</span> 
 <span class="token punctuation">{</span>
     <span class="token punctuation">(</span><span class="token string">&quot;Dashboard&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/admin/&quot;</span><span class="token punctuation">,</span>         Icons<span class="token punctuation">.</span>Dashboard<span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">(</span><span class="token string">&quot;Bookings&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;/admin/bookings&quot;</span><span class="token punctuation">,</span> Icons<span class="token punctuation">.</span>Booking<span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">(</span><span class="token string">&quot;Coupons&quot;</span><span class="token punctuation">,</span>   <span class="token string">&quot;/admin/coupons&quot;</span><span class="token punctuation">,</span>  Icons<span class="token punctuation">.</span>Coupon<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Where each section links to the different Admin UI Razor Pages:</p><h4 id="admin-index-cshtml" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/Index.cshtml" target="_blank" rel="noopener noreferrer">Admin/Index.cshtml</a> <a class="header-anchor" href="#admin-index-cshtml" aria-hidden="true">#</a></h4><p>Generates the Admin UI Dashboard which retrieves the data for the page from the <code>AdminData</code> API invoked with the internal <a href="https://docs.servicestack.net/service-gateway" target="_blank" rel="noopener noreferrer">Service Gateway</a>:</p><div class="language-csharp"><pre><code>@page
@<span class="token punctuation">{</span>
    ViewData<span class="token punctuation">[</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Dashboard&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> adminData <span class="token operator">=</span> <span class="token keyword">await</span> Html<span class="token punctuation">.</span><span class="token function">Gateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AdminData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>dl <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;mt-5 grid grid-cols-1 gap-5 sm:grid-cols-3&quot;</span><span class="token operator">&gt;</span>
        @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> adminData<span class="token punctuation">.</span>PageStats<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">&quot;/admin/@item.Label.ToLower()&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>dt <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token operator">&gt;</span>Total @item<span class="token punctuation">.</span>Label<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>dd <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token operator">&gt;</span>@item<span class="token punctuation">.</span>Total<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre></div><h4 id="admin-bookings-cshtml" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/Bookings.cshtml" target="_blank" rel="noopener noreferrer">Admin/Bookings.cshtml</a> <a class="header-anchor" href="#admin-bookings-cshtml" aria-hidden="true">#</a></h4><p>Defines the same responsive AutoQueryGrid to manage the Bookings RDBMS Table:</p><div class="language-csharp"><pre><code>@page
@<span class="token punctuation">{</span>
    ViewData<span class="token punctuation">[</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Bookings&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">&lt;</span>auto<span class="token operator">-</span>query<span class="token operator">-</span><span class="token class-name">grid</span> type<span class="token operator">=</span><span class="token string">&quot;Booking&quot;</span>
    selected<span class="token operator">-</span>columns<span class="token operator">=</span><span class="token string">&quot;id,name,roomType,roomNumber,bookingEndDate,cost,couponId,discount&quot;</span>
    <span class="token punctuation">:</span>header<span class="token operator">-</span>titles<span class="token operator">=</span><span class="token string">&quot;{ roomNumber:&#39;Room No&#39;, bookingStartDate:&#39;Start Date&#39;, couponId:&#39;Coupon&#39; }&quot;</span>
    <span class="token punctuation">:</span>visible<span class="token operator">-</span>from<span class="token operator">=</span><span class="token string">&quot;{ roomNumber:&#39;lg&#39;, cost:&#39;md&#39;, couponId:&#39;xl&#39;, discount:&#39;never&#39; }&quot;</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>auto<span class="token operator">-</span>query<span class="token operator">-</span>grid<span class="token operator">&gt;</span>
</code></pre></div><h4 id="admin-coupons-cshtml" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/Coupons.cshtml" target="_blank" rel="noopener noreferrer">Admin/Coupons.cshtml</a> <a class="header-anchor" href="#admin-coupons-cshtml" aria-hidden="true">#</a></h4><p>Utilizes the default AutoQueryGrid component to manage the Coupons RDBMS Table:</p><div class="language-csharp"><pre><code>@page
@<span class="token punctuation">{</span>
    ViewData<span class="token punctuation">[</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Coupons&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">&lt;</span>auto<span class="token operator">-</span>query<span class="token operator">-</span><span class="token class-name">grid</span> type<span class="token operator">=</span><span class="token string">&quot;Coupon&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>auto<span class="token operator">-</span>query<span class="token operator">-</span>grid<span class="token operator">&gt;</span>
</code></pre></div><h2 id="creating-custom-admin-uis" tabindex="-1">Creating Custom Admin UIs <a class="header-anchor" href="#creating-custom-admin-uis" aria-hidden="true">#</a></h2><p>Easiest way to start creating Custom Admin UIs is to start with a new <strong>vue-mjs</strong> Razor Pages template containing both client and server rendered Admin UIs:</p><div class="not-prose flex justify-center"><a class="hover:no-underline" href="https://account.servicestack.net/archive/NetCoreTemplates/vue-mjs?Name=MyApp"><div class="bg-white dark:bg-gray-800 px-4 py-4 mr-4 mb-4 rounded-lg shadow-lg text-center items-center justify-center hover:shadow-2xl dark:border-2 dark:border-pink-600 dark:hover:border-blue-600 dark:border-2 dark:border-pink-600 dark:hover:border-blue-600" style="min-width:150px;"><div class="text-center font-extrabold flex items-center justify-center mb-2"><div class="text-4xl text-blue-400 my-3"><svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 32 32"><path fill="currentColor" d="M23.844 27.692a16.332 16.332 0 0 1-6.645 1.3q-6.364 0-10.013-3.243a11.3 11.3 0 0 1-3.649-8.9a13.716 13.716 0 0 1 3.785-9.898A12.716 12.716 0 0 1 16.9 3.008a11.676 11.676 0 0 1 8.425 3.006a9.994 9.994 0 0 1 3.142 7.533a10.187 10.187 0 0 1-2.318 7.114a7.532 7.532 0 0 1-5.817 2.547a2.613 2.613 0 0 1-1.845-.642a2.323 2.323 0 0 1-.764-1.6a4.9 4.9 0 0 1-4.148 2.243a4.6 4.6 0 0 1-3.507-1.479a5.706 5.706 0 0 1-1.384-4.063a9.913 9.913 0 0 1 2.2-6.357q2.2-2.763 4.8-2.763a5.063 5.063 0 0 1 4.256 1.716l.311-1.338h2.405l-2.081 9.08a10.716 10.716 0 0 0-.352 2.243q0 .972.744.972a4.819 4.819 0 0 0 3.877-2.047a8.93 8.93 0 0 0 1.621-5.681a7.98 7.98 0 0 0-2.675-6.175a9.887 9.887 0 0 0-6.919-2.432a10.6 10.6 0 0 0-8.158 3.467a12.066 12.066 0 0 0-3.2 8.495a9.561 9.561 0 0 0 3.06 7.573q3.06 2.7 8.586 2.7a13.757 13.757 0 0 0 5.675-1.054ZM19.466 12.25a3.977 3.977 0 0 0-3.6-1.716q-1.824 0-3.263 2.23a8.726 8.726 0 0 0-1.439 4.824q0 3.635 2.905 3.635a3.771 3.771 0 0 0 2.651-1.183a6.309 6.309 0 0 0 1.7-3.2Z"></path></svg></div></div><div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Razor Pages</div><div class="flex justify-center h-8"><div class="mr-1"><span class="px-2 h-8 rounded-lg bg-blue-50 dark:bg-blue-900 text-blue-500 dark:text-blue-400 text-sm">autoquery</span></div><div class="mr-1"><span class="px-2 h-8 rounded-lg bg-blue-50 dark:bg-blue-900 text-blue-500 dark:text-blue-400 text-sm">auth</span></div></div><div class="archive-name px-4 pb-2 text-blue-600 dark:text-indigo-400">MyApp.zip</div></div></a></div><p>Alternatively you can download their pages to incorporate them into your existing Tailwind Projects:</p><p><strong>Client Admin UI</strong></p><ul><li><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/portal/index.html" target="_blank" rel="noopener noreferrer">/portal/index.html</a></li></ul><p><strong>Server Admin UI</strong></p><ul><li><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/_Layout.cshtml" target="_blank" rel="noopener noreferrer">_Layout.cshtml</a></li><li><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/Index.cshtml" target="_blank" rel="noopener noreferrer">Index.cshtml</a></li><li><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/Bookings.cshtml" target="_blank" rel="noopener noreferrer">Bookings.cshtml</a></li><li><a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Admin/Coupons.cshtml" target="_blank" rel="noopener noreferrer">Coupons.cshtml</a></li></ul><h2 id="creating-chatgpt-agents-to-call-system-apis" tabindex="-1">Creating ChatGPT Agents to call System APIs <a class="header-anchor" href="#creating-chatgpt-agents-to-call-system-apis" aria-hidden="true">#</a></h2><p>We&#39;ve been working on different patterns of development to enable <a href="https://openai.com" target="_blank" rel="noopener noreferrer">ChatGPT</a> to leverage an App&#39;s ServiceStack APIs to solve given tasks. This is done through various prompting techniques which allows the Agent to reason about the context of the conversation and make decisions to reach for different &#39;tools&#39; (your APIs) when trying to achieve a specific goal.</p><p>For anyone wishing to incorporate AI into their systems we&#39;ve created a introductory video into the techniques of how to leverage Large Language Models (LLMs) like GPT so they can make informed decisions on which of your internal APIs they should call to accomplish a given task described in natural language:</p>`,120),Y=a("div",{class:"my-8"},[a("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/7vChIGHWPuI",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),aa=r('<p>We&#39;ve created a working example of this in action to help facilitate automated solutions using the reasoning capabilities of ChatGPT with their ServiceStack APIs in the new <a href="https://github.com/NetCoreApps/GPTMeetingAgent" target="_blank" rel="noopener noreferrer">GPTMeetingAgent</a> GitHub project, that&#39;s being hosted at:</p><div class="not-prose my-16 px-4 sm:px-6"><div class="text-center"><h3 id="new-website" class="text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold text-gray-900"><a class="text-indigo-600 hover:text-indigo-600" href="https://gptmeetings.netcore.io">gptmeetings.netcore.io</a></h3></div><p class="mx-auto pt-5 text-xl text-gray-500"> Use Natural Language to instruct GPT Meeting Agents to Book Meetings using internal System APIs </p><div class="my-8"><a href="https://gptmeetings.netcore.io" class="max-w-4xl"><div class="block flex justify-center shadow hover:shadow-lg rounded"><img class="" src="'+q+`"></div></a></div></div><p>Which uses a new <code>GptAgentFeature</code> plugin to make it easy to create multiple Chat GPT Agents, define their roles and which of your ServiceStack APIs you want them to have access to, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> gptAgentFeature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GptAgentFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

gptAgentFeature<span class="token punctuation">.</span><span class="token function">RegisterAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GptAgentData</span> <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;BookingAgent&quot;</span><span class="token punctuation">,</span>
        PromptBase <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token string">&quot;Prompts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BasePromptExample.txt&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        Role <span class="token operator">=</span> <span class="token string">&quot;An AI that makes meeting bookings between staff.&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">agentFactory</span><span class="token punctuation">:</span> data <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenAiChatGptAgent</span><span class="token punctuation">(</span>chatGptApiKey<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">includeApis</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        Tags<span class="token punctuation">.</span>Teams<span class="token punctuation">,</span>
        Tags<span class="token punctuation">.</span>Calendar<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The above configuration registers a new Agent with the name <code>BookingAgent</code> and a description of what it does as the <code>Role</code>.</p><p>It also is configured to include the APIs with the <code>Tags.Teams</code> and <code>Tags.Calendar</code> tags, which are the APIs that the Agent will use to achieve its goals. Only these APIs will be exposed to the Agent, and the Agent will only be able to use them in the context of the prompt that is provided to it.</p><p>The Agent will also use the <code>Description</code> of the API to assist the Agent in understanding how and when to use the API.</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Tag</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Teams&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Search for users by name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchUsers</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>SearchUsersResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="autonomy-of-gpt-agents" tabindex="-1">Autonomy of GPT Agents <a class="header-anchor" href="#autonomy-of-gpt-agents" aria-hidden="true">#</a></h3><p>In fact the GPT Agents will automatically reach out to use all the APIs made available to them to fulfil the request it was tasked with.</p><figure class="mt-4"><a class="my-8 max-w-4xl mx-auto flex justify-center" href="https://servicestack.net/posts/chat-gpt-agents"><span class="rounded shadow hover:shadow-lg p-4"><img src="https://servicestack.net/img/posts/chat-gpt-agents/AgentFlow.drawio.svg" alt=""></span></a></figure><p>The video walks through an example of this by adding <strong>&quot;Ensure the meeting room has a projector&quot;</strong> to the meeting request, a statement which it largely ignores initially since it has no way of knowing which meeting rooms have projectors, but when we add a new <code>ListMeetingRooms</code> AutoQuery API that lists meeting rooms along with their related resources like <code>Projector</code>, <code>SmartBoard</code> and <code>Whiteboard</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MeetingRoomResource</span>
<span class="token punctuation">{</span>
    SmartBoard<span class="token punctuation">,</span>
    Projector<span class="token punctuation">,</span>
    Whiteboard<span class="token punctuation">,</span>
    VideoConference<span class="token punctuation">,</span>
    SpeakerPhone
<span class="token punctuation">}</span>
</code></pre></div><p>Then make it available to the GPT Meeting Agent by tagging it with <code>Tags.Teams</code> it&#39;s configured with:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Tag</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Tags<span class="token punctuation">.</span>Teams<span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Get a list of meeting rooms and their resources.&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListMeetingRooms</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>MeetingRoom<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MeetingRoom</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Location <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Resources <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Then extend the <code>CreateCalendarEvent</code> API that books the meeting to include a reference to the meeting room by Id:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Tag</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Tags<span class="token punctuation">.</span>Calendar<span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Create a meeting&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ConfirmationRequired</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Are you sure you want to create a meeting?&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateCalendarEvent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>CreateCalendarEventResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Subject <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Body <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;datetime-local&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Start <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;datetime-local&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> End <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AttendeeEmail <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Newly Added</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> MeetingRoomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now after we restart the application, our injected Service Commands now reflect both the new <code>ListMeetingRooms</code> API and the updated <code>CreateCalendarEvent</code> API in the Agent&#39;s prompt.</p><p>Now when we ask the Agent to &quot;Ensure the meeting room has a projector&quot;, the added context results in the agent calling our new <code>ListMeetingRooms</code> API to discover which Meeting Rooms have a projector, which it then uses to populate the correct <code>MeetingRoomId</code> when booking a meeting.</p><p>This is particularly exciting as no other changes were needed for the Agent to adopt this new intuitive behavior, which is reflected in both the Agent and the UI which it renders using <strong>AutoForm</strong> components from the APIs definition.</p><h3 id="human-verification-steps" tabindex="-1">Human Verification Steps <a class="header-anchor" href="#human-verification-steps" aria-hidden="true">#</a></h3><p>We believe there&#39;s a great opportunity to be had in leveraging Chat GPT in this way to automate system tasks, populate forms and invoke APIs, but also that you&#39;d want to intervene at important steps to verify the information is correct before authorizing the Action.</p><p>We&#39;ve added support for this feature by using the <code>[ConfirmationRequired]</code> attribute which instructs the UI which specific API forms can only be submitted manually, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ConfirmationRequired</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Are you sure you want to create a meeting?&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateCalendarEvent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>CreateCalendarEventResponse<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>Which is used in GPT Meetings to add a verification step allowing users to inspect the populated API Form that the GPT Meeting Agent created before deciding whether to create, modify or discard the Booking.</p><h3 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h3><p>If you&#39;re interested to learn more about how this works behind the scenes checkout our <a href="https://servicestack.net/posts/chat-gpt-agents" target="_blank" rel="noopener noreferrer">Creating ChatGPT Agents Blog Post</a> which goes into the background of how LLM&#39;s work in more detail and how we can use chain-of-thought and prompt engineering techniques to get the most out of them.</p><h1 class="text-6xl md:text-7xl lg:text-8xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center"> Vue Stable Diffusion </h1><p><img src="https://images.unsplash.com/photo-1573490647695-2892d0bf89e7?crop=entropy&amp;fit=crop&amp;h=1000&amp;w=2000" alt=""></p><p>Just as <a href="https://blazordiffusion.com" target="_blank" rel="noopener noreferrer">blazordiffusion.com</a> was created to showcase ServiceStack&#39;s Blazor Server and Blazor WASM <a href="https://servicestack.net/blazor" target="_blank" rel="noopener noreferrer">project templates and components</a>, we&#39;ve also recreated a new Stable Diffusion UI in Vue to showcase the <a href="https://razor-ssg.web-templates.io" target="_blank" rel="noopener noreferrer">Razor SSG</a> Project Template and Tailwind <a href="https://docs.servicestack.net/vue/" target="_blank" rel="noopener noreferrer">Vue Component Library</a> that&#39;s now available at:</p><h3 class="not-prose text-4xl text-center pb-8"><a class="text-blue-600 hover:underline" href="https://diffusion.works">https://diffusion.works</a></h3><h2 id="blazor-diffusion-with-a-vue-ui" tabindex="-1">Blazor Diffusion with a Vue UI <a class="header-anchor" href="#blazor-diffusion-with-a-vue-ui" aria-hidden="true">#</a></h2><p>Weighing close to <a href="https://api.blazordiffusion.com/metadata" target="_blank" rel="noopener noreferrer">100 APIs</a>, Blazor Diffusion is good representation of a medium-sized real-world App that can be used to compare the end user UX of different popular UI technologies used to develop Web Apps.</p><p>These Diffusion Apps are especially comparable as both Blazor WASM and Vue are both SSG Jamstack Apps deployed to a CDN which both access the same <a href="https://api.blazordiffusion.com/metadata" target="_blank" rel="noopener noreferrer">https://api.blazordiffusion.com</a> backend .NET APIs and both make use of the Tailwind <a href="https://servicestack.net/blazor#blazor-component-gallery" target="_blank" rel="noopener noreferrer">Blazor Component Library</a> and <a href="https://docs.servicestack.net/vue/" target="_blank" rel="noopener noreferrer">Vue Component Library</a> rewritten in Vue, so any differences in UX are predominantly differences in what the UI technologies can deliver.</p><p>We&#39;ll look at covering the development workflow, productivity, startup and runtime performance of Blazor Server, Blazor WASM and Vue in a future post, for now you can compare their GitHub code-bases and Live Demos of each or download and run them locally to evaluate their code-base size, development workflow and performance to evaluate the different UI technologies:</p><table><thead><tr><th>Name</th><th>Repo</th><th>Live Demo</th></tr></thead><tbody><tr><td>Vue</td><td><a href="https://github.com/NetCoreApps/VueDiffusion" target="_blank" rel="noopener noreferrer">NetCoreApps/VueDiffusion</a></td><td><a href="https://diffusion.works" target="_blank" rel="noopener noreferrer">https://diffusion.works</a></td></tr><tr><td>Blazor WASM</td><td><a href="https://github.com/NetCoreApps/BlazorDiffusionWasm" target="_blank" rel="noopener noreferrer">NetCoreApps/BlazorDiffusionWasm</a></td><td><a href="https://blazordiffusion.com" target="_blank" rel="noopener noreferrer">blazordiffusion.com</a></td></tr><tr><td>Blazor Server</td><td><a href="https://github.com/NetCoreApps/BlazorDiffusion" target="_blank" rel="noopener noreferrer">NetCoreApps/BlazorDiffusion</a></td><td><a href="https://server.blazordiffusion.com" target="_blank" rel="noopener noreferrer">server.blazordiffusion.com</a></td></tr></tbody></table><p>It&#39;s best to evaluate Blazor Server by running it locally as it in particular has poor responsiveness when served over high internet latencies, but loads and runs exceptional well in low latency environments like Intranets which is the only environment where we&#39;d recommend hosting it.</p><h2 id="razor-ssg" tabindex="-1">Razor SSG <a class="header-anchor" href="#razor-ssg" aria-hidden="true">#</a></h2><p>Vue Diffusion is built differently from other Razor SSG Apps as instead of being pre-rendered from static content like Markdown documents, it&#39;s prerendered from <a href="https://blazordiffusion.com" target="_blank" rel="noopener noreferrer">https://blazordiffusion.com</a> APIs to render its dynamic <a href="https://diffusion.works/albums/" target="_blank" rel="noopener noreferrer">Albums</a>, <a href="https://diffusion.works/top" target="_blank" rel="noopener noreferrer">Top</a> and <a href="https://diffusion.works/latest" target="_blank" rel="noopener noreferrer">Latest</a> pages at deployment which it does by configuring the App&#39;s <a href="https://docs.servicestack.net/service-gateway" target="_blank" rel="noopener noreferrer">Service Gateway</a> to reference <a href="https://github.com/NetCoreApps/VueDiffusion/blob/0bbbca3970c07c0cf261ae32c24736ae287981f9/MyApp/Configure.Ssg.cs#L22" target="_blank" rel="noopener noreferrer">external Blazor Diffusion APIs</a>:</p><div class="language-csharp"><pre><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceGateway<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token named-parameter punctuation">implementationFactory</span><span class="token punctuation">:</span> 
    provider <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonApiClient</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>ApiBaseUrl<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Resulting in all APIs invoked within Razor Pages being delegated to external Blazor Diffusion APIs as the data source to generate its prerendered Razor Pages.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><p>For a preview of the development model of Razor SSG enhanced with Vue Components, checkout some of the different pages and their implementations:</p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Stable Diffusion Search</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Index.cshtml"> Index.cshtml </a></h3></div><p><a href="https://diffusion.works" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-search.png" alt=""></a></p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Generate Images</span><span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Create.cshtml"> Create.cshtml </a><span class="text-gray-400">|</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/wwwroot/mjs/components/Create.mjs"> Create.mjs </a></span></h3></div><p><a href="https://diffusion.works/create" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-create.png" alt=""></a></p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Favorites</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Favorites.cshtml"> Favorites.cshtml </a></h3></div><p><a href="https://diffusion.works/favorites" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-favorites.png" alt=""></a></p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Albums</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Albums.cshtml"> Albums.cshtml </a></h3></div><p><a href="https://diffusion.works/albums/" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-albums.png" alt=""></a></p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Selected Image</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/wwwroot/mjs/components/Artifacts.mjs#L303"> Artifacts.mjs </a></h3></div><p><a href="https://diffusion.works/?view=63121" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-selected.png" alt=""></a></p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Top Images</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Top.cshtml"> Top.cshtml </a></h3></div><p><a href="https://diffusion.works/top" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-top.png" alt=""></a></p><div class="not-prose"><h3 class="text-3xl flex justify-between"><span>Latest Images</span><span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Latest.cshtml"> Latest.cshtml </a><span class="text-gray-400">|</span><a class="text-blue-600 hover:underline" href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/Pages/Latest.cshtml.cs"> Latest.cshtml.cs </a></span></h3></div><p><a href="https://diffusion.works/latest" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-latest.png" alt=""></a></p><p>Most of these pages also utilize the reusable Vue 3 components defined in:</p><ul><li><a href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/wwwroot/mjs/components/Artifacts.mjs" target="_blank" rel="noopener noreferrer">Artifacts.mjs</a></li><li><a href="https://github.com/NetCoreApps/VueDiffusion/blob/main/MyApp/wwwroot/mjs/components/Auth.mjs" target="_blank" rel="noopener noreferrer">Auth.mjs</a></li></ul><h2 id="stale-while-revalidate-apis" tabindex="-1">Stale-While-Revalidate APIs <a class="header-anchor" href="#stale-while-revalidate-apis" aria-hidden="true">#</a></h2><p>We&#39;ll have a lot more to write up about our experiences with Vue Diffusion vs Blazor Diffusion in future <a href="https://servicestack.net/blog" target="_blank" rel="noopener noreferrer">Blog Posts</a>, but we wanted to highlight the performance enhancing technique it uses to improve perceived performance between pages by utilizing <code>@servicestack/vue</code> new State-While-Revalidate (SWR) APIs.</p><p>Latency is the biggest performance killer when hosting Web Applications on the Internet, so much so that we&#39;d historically look to start with a <a href="https://jamstacks.net" target="_blank" rel="noopener noreferrer">Single Page App template</a> in order to provide the best UX up until the advent of native ES Modules support in modern browsers meant we could rid ourselves of SPA complexity and adopt a <a href="https://jamstacks.net/posts/javascript" target="_blank" rel="noopener noreferrer">Simple, Modern JavaScript</a> Multi Page App (MPA) approach combined with <a href="https://htmx.org/attributes/hx-boost/" target="_blank" rel="noopener noreferrer">htmx&#39;s Boost</a> feature to improve performance by avoiding full page reloads.</p><p>However we found that to be a fragile approach when navigating back/forward between pages as you&#39;d need to be mindful of what scripts to place between <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> tags, reintroducing some of that stateful SPA complexity we wanted to avoid with a traditional MPA Web App.</p><p>We instead discovered we could get just as good UX with stateless full page reloads of pre-rendered HTML pages if we use SWR to fetch all the API data needed to render the page on first load:</p><p><a href="https://diffusion.works" target="_blank" rel="noopener noreferrer"><img src="`+A+`" alt=""></a></p><p>This is easily achieved in reactive Vue.js UIs by invoking API requests with the new <code>swr()</code> client API where if the same API request had been run before it will execute the callback immediately with its (stale) cached results in <code>localStorage</code> first before executing the callback again after receiving the API response with the latest data:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> topAlbums <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//...</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        client<span class="token punctuation">.</span><span class="token function">swr</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>value<span class="token punctuation">,</span> api <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            results<span class="token punctuation">.</span>value <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token operator">?.</span>results <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        client<span class="token punctuation">.</span><span class="token function">swr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnonData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> api <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            topAlbums<span class="token punctuation">.</span>value <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token operator">?.</span>topAlbums <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>This results in UIs being immediately rendered on load and if the API response has changed, the updated reactive collections will re-render the UI with the updated data.</p><h3 id="swreffect" tabindex="-1">swrEffect <a class="header-anchor" href="#swreffect" aria-hidden="true">#</a></h3><p>After <a href="https://github.com/NetCoreTemplates/vue-vite/issues/2" target="_blank" rel="noopener noreferrer">running into an issue upgrading useSWRV</a> after upgrading the Vue Jamstack templates npm dependencies, we decided to replace their existing <a href="https://github.com/Kong/swrv" target="_blank" rel="noopener noreferrer">swrv</a> dependency with a built-in feature.</p><p>Previously we used <code>useSWRV</code> with some boilerplate around the generic <code>JsonServiceClient</code>:</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">SwrClient</span> <span class="token punctuation">{</span>
    client<span class="token operator">:</span>JsonServiceClient
    <span class="token function">constructor</span><span class="token punctuation">(</span>client<span class="token operator">:</span>JsonServiceClient<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client <span class="token punctuation">}</span>
    <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> IReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> IResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">useSWRV</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SwrClient:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">nameOf</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> key <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> swrClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwrClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
</code></pre></div><p>To enabled a pleasant API for executing SWR requests that re-executed when it detected changes in any of its referenced properties:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> swrClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> props<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>We&#39;ve since replaced the <strong>swrv</strong> dependency with a built-in <code>swrEffect()</code> API that uses Vue&#39;s <code>watchEffect</code> to detect property changes to trigger invoking the API request and returning API responses in a more idiomatic <code>ApiResult&lt;T&gt;</code> with a similarly pleasant declarative API without the unnecessary boilerplate:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//...</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">swrEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> props<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>It also includes a built-in <a href="https://www.freecodecamp.org/news/javascript-debounce-example/" target="_blank" rel="noopener noreferrer">debounce feature</a> where you can collapse multiple event triggers within a specified duration (like input events when a user is typing), e.g. we can initiate an API request when a user has paused briefly after 50ms with:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> api <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">swrEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> props<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> delayMs<span class="token operator">:</span><span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="bringing-xkcd-static-dataset-to-life-with-autoquery" tabindex="-1">Bringing xkcd static dataset to life with AutoQuery <a class="header-anchor" href="#bringing-xkcd-static-dataset-to-life-with-autoquery" aria-hidden="true">#</a></h2><p><a href="https://servicestack.net/posts/autoquery-xkcd" target="_blank" rel="noopener noreferrer"><img src="https://servicestack.net/img/posts/autoquery-xkcd/drawing-xkcd-upscaled.png" alt=""></a></p><p>One of the big advantages of using AutoQuery is the ability to turn data into an API with very little effort where once your data is exposed behind an AutoQuery API, it&#39;s accessible in any way you want, Auto UIs, a web app, a mobile app, a desktop app, or even from CLI&#39;s.</p><h3 id="unsiloing-data-with-autoquery" tabindex="-1">Unsiloing Data with AutoQuery <a class="header-anchor" href="#unsiloing-data-with-autoquery" aria-hidden="true">#</a></h3><p>Outside of IT systems many organizations still heavily deal with static files, often maintained sporadically across multiple excel files and documents. Poor data accessibility is still something that slows down teams, while it can be easier for a single analyst/modeler/data scientist to work directly with static files, not having shared access to the data can limit reuse, discovery and insights from the dataset.</p><p>Web APIs can help un-silo the data, create more efficient access points and reduce the time it takes to get data from single use into a widely accessible production application. This is where AutoQuery shines, making it easy to expose data behind a fully queryable API that can easily be turned into a Web Application by utilizing the various AutoQueryGrid and DataGrid components.</p><p>In this video, we&#39;ll look at example of this, by using AutoQuery to create a Web App providing multiple views around a static xkcd <a href="https://jsonlines.org" target="_blank" rel="noopener noreferrer">JSON Lines</a> dataset that&#39;s <a href="https://huggingface.co/datasets/olivierdehaene/xkcd" target="_blank" rel="noopener noreferrer">available on Hugging Face</a>:</p>`,85),sa=a("div",{class:"my-8"},[a("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/CrKtXVrPj8Q",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),na=r(`<h3 id="the-xkcd-autoquery-api" tabindex="-1">The xkcd AutoQuery API <a class="header-anchor" href="#the-xkcd-autoquery-api" aria-hidden="true">#</a></h3><p>After <a href="https://github.com/NetCoreApps/ssg-examples/blob/master/ExampleDataApis/Configure.Db.Xkcd.cs" target="_blank" rel="noopener noreferrer">importing its .jsonl into an RDBMS table</a> only a single AutoQuery API was needed to expose this dataset behind an AutoQuery API:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/xkcd&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryXkcdComics</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>XkcdComic<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Ids <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XkcdComic</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ImageTitle <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ImageUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ExplainedUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Transcript <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Explanation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Width <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Height <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which is the entire API definition, as AutoQuery will generate its fully queryable implementation when one isn&#39;t provided. As an AutoQuery API an immediate queryable Auto UI is provided by <a href="https://docs.servicestack.net/locode/" target="_blank" rel="noopener noreferrer">Locode</a> is accessible from <a href="https://ssg-examples.netcore.io/locode/QueryXkcdComics" target="_blank" rel="noopener noreferrer">/locode/QueryXkcdComics</a></p><figure class="py-8"><a class="my-8 max-w-4xl mx-auto block" href="https://ssg-examples.netcore.io/locode/QueryXkcdComics"><img class="rounded shadow hover:shadow-lg" src="https://servicestack.net/img/posts/autoquery-xkcd/locode-app.png" alt=""></a></figure><p>Also queryable from <a href="https://docs.servicestack.net/api-explorer" target="_blank" rel="noopener noreferrer">API Explorer</a> at <a href="https://ssg-examples.netcore.io/ui/QueryXkcdComics" target="_blank" rel="noopener noreferrer">/ui/QueryXkcdComics</a> and <a href="https://docs.servicestack.net/auto-html-api" target="_blank" rel="noopener noreferrer">Auto HTML API Page</a> at <a href="https://ssg-examples.netcore.io/api/QueryXkcdComics.html" target="_blank" rel="noopener noreferrer">/api/QueryXkcdComics.html</a> where step-by-step instructions are available to call this typed API in 10 languages:</p><figure class="py-8"><a class="my-8 max-w-4xl mx-auto block" href="https://ssg-examples.netcore.io/api/QueryXkcdComics.html?tab=code"><img class="rounded shadow hover:shadow-lg" src="`+_+'" alt=""></a></figure><p>Of which the TypeScript DTOs was enough to build entire Web Application around, published on GitHub Pages CDN at:</p><h3 class="not-prose text-4xl text-center pb-8"><a class="text-blue-600 hover:underline" href="https://xkcd.netcore.io">https://xkcd.netcore.io</a></h3><p>Built from a new <a href="https://razor-ssg.web-templates.io/posts/razor-ssg" target="_blank" rel="noopener noreferrer">Razor SSG</a> project template that&#39;s maintained at: <a href="https://github.com/NetCoreApps/Xkcd" target="_blank" rel="noopener noreferrer">https://github.com/NetCoreApps/Xkcd</a></p><p>It includes 3 different views of the data:</p><h3 id="search-xkcd" tabindex="-1">Search xkcd <a class="header-anchor" href="#search-xkcd" aria-hidden="true">#</a></h3><p>The home page optimized for visually searching through and learning about the background and pretext behind different comics:</p><figure class="py-8"><a class="mt-8 max-w-4xl mx-auto block" href="https://xkcd.netcore.io"><img class="rounded shadow hover:shadow-lg" src="'+C+'" alt=""></a><a class="mb-8 block text-center" href="https://github.com/NetCoreApps/Xkcd/blob/master/Xkcd/Pages/Index.cshtml">view source</a></figure><h3 id="autoquerygrid-xkcd" tabindex="-1">AutoQueryGrid xkcd <a class="header-anchor" href="#autoquerygrid-xkcd" aria-hidden="true">#</a></h3><p>A custom responsive AutoQueryGrid providing an alternative queryable UI for searching xkcd comics:</p><figure class="py-8"><a class="mt-8 max-w-4xl mx-auto block" href="https://xkcd.netcore.io/comics-autoquery"><img class="rounded shadow hover:shadow-lg" src="'+I+`" alt=""></a><a class="mb-8 block text-center" href="https://github.com/NetCoreApps/Xkcd/blob/master/Xkcd/Pages/ComicsAutoQuery.cshtml">view source</a></figure><p>Generated using a custom <a href="https://docs.servicestack.net/vue/gallery/autoquerygrid" target="_blank" rel="noopener noreferrer">AutoQueryGrid Vue Component</a>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auto-query-grid</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>XkcdComic<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">selected-columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imageUrl,width,height,id,title,transcript,explanation,url<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:visible-from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ title:&#39;sm&#39;, transcript:&#39;xl&#39;, explanation:&#39;2xl&#39;, url:&#39;never&#39; }<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:header-titles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ imageUrl:&#39;Comic&#39;, transcript:&#39;Description&#39; }<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">v-on:</span>row-selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rowSelected<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mx-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#imageUrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ id, imageUrl }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imageUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-12 object-cover<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#transcript</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ transcript }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>block max-w-sm text-ellipsis overflow-hidden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ transcript }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#explanation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ explanation }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>block max-w-sm text-ellipsis overflow-hidden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ explanation }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auto-query-grid</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="datagrid-xkcd" tabindex="-1">DataGrid xkcd <a class="header-anchor" href="#datagrid-xkcd" aria-hidden="true">#</a></h3><p>An alternative Grid display to search for comics:</p><figure class="py-8"><a class="mt-8 max-w-4xl mx-auto block" href="https://xkcd.netcore.io/comics-datagrid"><img class="rounded shadow hover:shadow-lg" src="`+S+`" alt=""></a><a class="mb-8 block text-center" href="https://github.com/NetCoreApps/Xkcd/blob/master/Xkcd/Pages/ComicsDataGrid.cshtml">view source</a></figure><p>Generated from a custom <a href="https://docs.servicestack.net/vue/gallery/datagrid" target="_blank" rel="noopener noreferrer">DataGrid Vue Component</a>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data-grid</span> <span class="token attr-name">:items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>comics<span class="token punctuation">&quot;</span></span> 
            <span class="token attr-name">selected-columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imageUrl,transcript<span class="token punctuation">&quot;</span></span> 
            <span class="token attr-name"><span class="token namespace">v-on:</span>row-selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rowSelected<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:is-row-selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row =&gt; row == selected<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">:header-titles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ imageUrl:&#39;Comic&#39;,transcript: &#39;Description&#39; }<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-screen-lg mx-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#imageUrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ imageUrl }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imageUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-48 object-cover<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#transcript</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ title, transcript, width, height }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col max-w-3xl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex justify-between<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-lg font-semibold text-gray-900<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-right text-sm font-semibold block<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{width}} x {{height}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>whitespace-normal break-words overflow-hidden max-h-40<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ transcript }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data-grid</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Checkout the <a href="https://servicestack.net/posts/autoquery-xkcd" target="_blank" rel="noopener noreferrer">companion Blog Post</a> to learn more about how this application was built:</p><h2 id="razor-ssg-improvements" tabindex="-1">Razor SSG Improvements <a class="header-anchor" href="#razor-ssg-improvements" aria-hidden="true">#</a></h2><p><a href="https://razor-ssg.web-templates.io/posts/razor-ssg" target="_blank" rel="noopener noreferrer"><img src="https://images.unsplash.com/photo-1579767684138-a57e917d30aa?crop=entropy&amp;fit=crop&amp;h=1000&amp;w=2000" alt=""></a></p><p>The underlying template that underpins most of the features in this release is that they were built with our newest <a href="https://razor-ssg.web-templates.io/posts/razor-ssg" target="_blank" rel="noopener noreferrer">Razor SSG</a> project template, which uniquely differs from typical .NET Apps in that there&#39;s no .NET App to deploy since (like its Next.js and Jekyll inspirations) its build output is a static website that can be hosted on any CDN or static file server.</p><p>It quickly became our favorite Jamstack SSG template since unlike our <a href="https://docs.servicestack.net/templates-jamstack#next-js" target="_blank" rel="noopener noreferrer">Next.js</a> and <a href="https://docs.servicestack.net/templates-jamstack#vue-ssg" target="_blank" rel="noopener noreferrer">Vue SSG</a> project templates it doesn&#39;t require any npm dependencies as it&#39;s generated entirely using .NET and Razor Pages where you&#39;ll be able to make use of your existing .NET Libraries, IDEs and Razor Pages development experience to build delightfully responsive websites thanks to its optimal performance &amp; SEO architecture of generating static HTML pages that can be served from CDN edge caches.</p><p>We&#39;re also confident in the longevity of the technologies it&#39;s built on, which wont be outdated by the next npm build tool as its <a href="https://servicestack.net/posts/javascript" target="_blank" rel="noopener noreferrer">Simple, Modern JavaScript</a> approach lets us take advantage of the native ES Modules support in all modern browsers to forgo using any build tools or transpilers.</p><h3 id="razor-ssg-websites" tabindex="-1">Razor SSG Websites <a class="header-anchor" href="#razor-ssg-websites" aria-hidden="true">#</a></h3><p>In addition to <a href="/releases/v6_8">rewriting our old Jekyll website</a> in the last release, we&#39;ve created 3 new Razor SSG websites during this release including rewriting <a href="https://jamstacks.net" target="_blank" rel="noopener noreferrer">jamstacks.net</a> website from its old <a href="https://github.com/NetCoreApps/Jamstacks" target="_blank" rel="noopener noreferrer">Vue SSG Codebase</a>.</p><div class="not-prose mt-8 grid grid-cols-2 gap-4"><a class="block group border hover:border-indigo-700" href="https://servicestack.net"><img class="p-2" src="`+v+'"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">servicestack.net</div></a><a class="block group border hover:border-indigo-700" href="https://diffusion.works"><div style="max-height:350px;overflow:hidden;"><img class="p-2" src="https://servicestack.net/img/posts/vue-diffusion/vuediffusion-search.png"></div><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">diffusion.works</div></a><a class="block group border hover:border-indigo-700" href="https://xkcd.netcore.io"><img class="p-2" src="'+T+'"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">xkcd.netcore.io</div></a><a class="block group border hover:border-indigo-700" href="https://jamstacks.net"><img class="p-2" src="'+P+'"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">jamstacks.net</div></a></div><h3 id="markdown-video-feature" tabindex="-1">Markdown Video Feature <a class="header-anchor" href="#markdown-video-feature" aria-hidden="true">#</a></h3><p>Razor SSG includes a new videos feature populated by <a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/Markdown.Videos.cs" target="_blank" rel="noopener noreferrer">Markdown.Videos.cs</a> from markdown files in its <a href="https://github.com/NetCoreTemplates/razor-ssg/tree/main/MyApp/_videos" target="_blank" rel="noopener noreferrer">_videos</a> folder:</p>',35),ta=r('<p>Rendered by the <a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/Pages/Shared/VideoGroup.cshtml" target="_blank" rel="noopener noreferrer">VideoGroup.cshtml</a> partial to render video content in the <a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/Pages/Videos.cshtml" target="_blank" rel="noopener noreferrer">Videos.cshtml</a> page:</p><figure class="py-8"><a class="mt-8 max-w-4xl mx-auto block" href="https://razor-ssg.web-templates.io/videos"><img class="rounded shadow hover:shadow-lg" src="'+M+'" alt=""></a></figure><h3 id="markdown-docs" tabindex="-1">Markdown Docs <a class="header-anchor" href="#markdown-docs" aria-hidden="true">#</a></h3><p>Razor SSG improves support for maintaining documentation in Markdown where nested documentation can be added in <code>_pages</code> that&#39;s later accessible in Razor Pages using the <code>MarkdownPages</code> collection.</p><p>As a demonstration a copy of the CreatorKit Docs were added to <a href="https://github.com/NetCoreTemplates/razor-ssg/tree/main/MyApp/_pages/creatorkit" target="_blank" rel="noopener noreferrer">_pages/creatorkit</a>:</p>',5),ea=r('<p>Which are generated by the Razor Pages in:</p><ul><li><a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/Pages/CreatorKit/Index.cshtml" target="_blank" rel="noopener noreferrer">/CreatorKit/Index.cshtml</a></li><li><a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/Pages/CreatorKit/Page.cshtml" target="_blank" rel="noopener noreferrer">/CreatorKit/Page.cshtml</a></li></ul><p>To generate both the <a href="https://razor-ssg.web-templates.io/creatorkit/" target="_blank" rel="noopener noreferrer">razor-ssg.web-templates.io/creatorkit/</a> home page and <a href="https://razor-ssg.web-templates.io/creatorkit/about" target="_blank" rel="noopener noreferrer">documentation pages</a>.</p><h3 id="metadata-apis" tabindex="-1">Metadata APIs <a class="header-anchor" href="#metadata-apis" aria-hidden="true">#</a></h3><p>A disadvantage of not having .NET App to deploy is the lack of having APIs we can call to query website data in a easily readable data format like JSON. This is required to support use-cases like CreatorKit&#39;s <a href="https://servicestack.net/creatorkit/portal-mailruns#generating-newsletters" target="_blank" rel="noopener noreferrer">Generating Newsletters</a> feature which generates a Monthly Newsletter Email with all new content added in the month.</p><p>We can easily support this in Razor SSG by also pre-rendering static <code>*.json</code> data structures along with the pre-rendered website at deployment.</p><p>This capability is provided by the new <a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/Markdown.Meta.cs" target="_blank" rel="noopener noreferrer">Markdown.Meta.cs</a> feature which generates multiple projections of the Markdown metadata for each type of content added in every year, e.g:</p>',7),oa=r('<p>With this you can fetch the metadata of all the new <strong>Blog Posts</strong> added in <strong>2023</strong> from:</p><h4 id="_2023-posts-json" tabindex="-1"><a href="https://razor-ssg.web-templates.io/meta/2023/posts.json" target="_blank" rel="noopener noreferrer">/2023/posts.json</a> <a class="header-anchor" href="#_2023-posts-json" aria-hidden="true">#</a></h4><p>Or all the website content added in <strong>2023</strong> from:</p><h4 id="_2023-all-json" tabindex="-1"><a href="https://razor-ssg.web-templates.io/meta/2023/all.json" target="_blank" rel="noopener noreferrer">/2023/all.json</a> <a class="header-anchor" href="#_2023-all-json" aria-hidden="true">#</a></h4><p>Or <strong>ALL</strong> the website metadata content from:</p><h4 id="all-json" tabindex="-1"><a href="https://razor-ssg.web-templates.io/meta/all.json" target="_blank" rel="noopener noreferrer">/all.json</a> <a class="header-anchor" href="#all-json" aria-hidden="true">#</a></h4><h3 id="creatorkit-integration" tabindex="-1">CreatorKit Integration <a class="header-anchor" href="#creatorkit-integration" aria-hidden="true">#</a></h3><p>The lack of a .NET backend server is no longer a barrier to enable popular dynamic website features now that we&#39;re able to embed CreatorKit&#39;s Tailwind Components into our static websites which sees Razor SSG support accepting newsletter sign ups throughout the website:</p><figure class="py-8"><a class="max-w-4xl mx-auto block" href="https://razor-ssg.web-templates.io/"><img class="rounded shadow hover:shadow-lg" src="'+z+'" alt=""></a></figure><p>As well as enabling support for voting and post comments:</p><figure class="py-8"><a class="max-w-4xl mx-auto block" href="https://razor-ssg.web-templates.io/posts/razor-ssg"><img class="rounded shadow hover:shadow-lg" src="'+j+`" alt=""></a></figure><h3 id="integration-pages" tabindex="-1">Integration Pages <a class="header-anchor" href="#integration-pages" aria-hidden="true">#</a></h3><p>Razor SSG is the easiest template to get use CreatorKit with which includes all the necessary Pages for <a href="https://servicestack.net/creatorkit/integrations" target="_blank" rel="noopener noreferrer">integrating with CreatorKit</a> features:</p><table><thead><tr><th>Page</th><th>Source Code</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://razor-ssg.web-templates.io/signup-confirmed" target="_blank" rel="noopener noreferrer">/signup-confirmed</a></td><td><a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/_pages/signup-confirmed.md" target="_blank" rel="noopener noreferrer">signup-confirmed.md</a></td><td>Landing page after email verified Newsletter Signup</td></tr><tr><td><a href="https://razor-ssg.web-templates.io/mail-preferences" target="_blank" rel="noopener noreferrer">/mail-preferences</a></td><td><a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/_pages/mail-preferences.md" target="_blank" rel="noopener noreferrer">mail-preferences.md</a></td><td>Allow subscribers to manage their subscriptions</td></tr><tr><td><a href="https://razor-ssg.web-templates.io/privacy" target="_blank" rel="noopener noreferrer">/privacy</a></td><td><a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/_pages/privacy.md" target="_blank" rel="noopener noreferrer">privacy.md</a></td><td>Privacy policy linked from email footers</td></tr><tr><td><a href="https://razor-ssg.web-templates.io/community-rules" target="_blank" rel="noopener noreferrer">/community-rules</a></td><td><a href="https://github.com/NetCoreTemplates/razor-ssg/blob/main/MyApp/_pages/community-rules.md" target="_blank" rel="noopener noreferrer">community-rules.md</a></td><td>Community Rules for posting public comments</td></tr></tbody></table><h3 id="pre-rendering-removed-from-vue-mjs" tabindex="-1">Pre-rendering removed from vue-mjs <a class="header-anchor" href="#pre-rendering-removed-from-vue-mjs" aria-hidden="true">#</a></h3><p>As Razor SSG has become the preferred template for performance enthusiasts wanting to use pre-rendering to deliver the best UX for their content heavy websites, we&#39;ve decided to remove the pre-rendering features from the <a href="https://vue-mjs.web-templates.io" target="_blank" rel="noopener noreferrer">vue-mjs template</a> to reduce the complexity and required knowledge to use the template.</p><h3 id="autoquery-enum-flags" tabindex="-1">AutoQuery Enum Flags <a class="header-anchor" href="#autoquery-enum-flags" aria-hidden="true">#</a></h3><ul><li>fromEnumFlagsList</li><li>toEnumFlagsList</li><li>[FormatEnumFlags(type)]</li></ul><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    ImplicitConventions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
        <span class="token punctuation">{</span><span class="token string">&quot;%HasAll&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{Value} &amp; {Field} = {Value}&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&quot;%HasAny&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{Value} &amp; {Field} &gt; 0&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoPopulate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Contact<span class="token punctuation">.</span>MailingLists<span class="token punctuation">)</span><span class="token punctuation">,</span> Eval <span class="token operator">=</span> <span class="token string">&quot;dto.MailingLists.fromEnumFlagsList(typeof(&#39;MailingList&#39;))&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateContact</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPatchDb<span class="token punctuation">&lt;</span>Contact<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>Contact<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token function">Input</span><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">,</span> EvalAllowableValues <span class="token operator">=</span> <span class="token string">&quot;AppData.MailingListValues&quot;</span><span class="token punctuation">,</span> 
           Options <span class="token operator">=</span> <span class="token string">&quot;{ converter:enumFlagsConverter(&#39;MailingList&#39;) }&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> MailingLists <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><hr><h3 id="sqlite-enableforeignkeys" tabindex="-1">Sqlite EnableForeignKeys <a class="header-anchor" href="#sqlite-enableforeignkeys" aria-hidden="true">#</a></h3><ul><li>SqliteDialect.Instance.EnableForeignKeys</li><li>SqliteDialect.Instance.ConnectionCommands.Add(&quot;PRAGMA foreign_keys=ON;&quot;);</li></ul><h3 id="corsfeature-appsettings" tabindex="-1">CorsFeature AppSettings <a class="header-anchor" href="#corsfeature-appsettings" aria-hidden="true">#</a></h3>`,24);function k(t){window.open(t)}const ia=`{"title":"ServiceStack v6.9","description":"","frontmatter":{"title":"ServiceStack v6.9"},"headers":[{"level":3,"title":"Enhance static websites","slug":"enhance-static-websites"},{"level":3,"title":"CreatorKit Features","slug":"creatorkit-features"},{"level":3,"title":"Email Management","slug":"email-management"},{"level":3,"title":"Optimized Email UI's with Live Previews","slug":"optimized-email-ui-s-with-live-previews"},{"level":3,"title":"Custom HTML Templates","slug":"custom-html-templates"},{"level":3,"title":"HTML Email Templates","slug":"html-email-templates"},{"level":3,"title":"Mailing List Email Runs","slug":"mailing-list-email-runs"},{"level":3,"title":"Newsletter Generation","slug":"newsletter-generation"},{"level":3,"title":"Comment Moderation","slug":"comment-moderation"},{"level":3,"title":"CreatorKit Docs","slug":"creatorkit-docs"},{"level":3,"title":"Future","slug":"future"},{"level":3,"title":"Feedback welcome","slug":"feedback-welcome"},{"level":2,"title":"Markdown Editor Input","slug":"markdown-editor-input"},{"level":2,"title":"Custom Declarative Input Components","slug":"custom-declarative-input-components"},{"level":3,"title":"EmailInput","slug":"emailinput"},{"level":3,"title":"MarkdownEmailInput","slug":"markdownemailinput"},{"level":3,"title":"AutoForm Components Everywhere","slug":"autoform-components-everywhere"},{"level":2,"title":"Build Admin UIs, Fast","slug":"build-admin-uis-fast"},{"level":3,"title":"SidebarLayout Vue Component","slug":"sidebarlayout-vue-component"},{"level":2,"title":"Client Admin UI","slug":"client-admin-ui"},{"level":3,"title":"Server Admin UI","slug":"server-admin-ui"},{"level":2,"title":"Creating Custom Admin UIs","slug":"creating-custom-admin-uis"},{"level":2,"title":"Creating ChatGPT Agents to call System APIs","slug":"creating-chatgpt-agents-to-call-system-apis"},{"level":3,"title":"Autonomy of GPT Agents","slug":"autonomy-of-gpt-agents"},{"level":3,"title":"Human Verification Steps","slug":"human-verification-steps"},{"level":3,"title":"How it works","slug":"how-it-works"},{"level":2,"title":"Blazor Diffusion with a Vue UI","slug":"blazor-diffusion-with-a-vue-ui"},{"level":2,"title":"Razor SSG","slug":"razor-ssg"},{"level":2,"title":"Features","slug":"features"},{"level":2,"title":"Stale-While-Revalidate APIs","slug":"stale-while-revalidate-apis"},{"level":3,"title":"swrEffect","slug":"swreffect"},{"level":2,"title":"Bringing xkcd static dataset to life with AutoQuery","slug":"bringing-xkcd-static-dataset-to-life-with-autoquery"},{"level":3,"title":"Unsiloing Data with AutoQuery","slug":"unsiloing-data-with-autoquery"},{"level":3,"title":"The xkcd AutoQuery API","slug":"the-xkcd-autoquery-api"},{"level":3,"title":"Search xkcd","slug":"search-xkcd"},{"level":3,"title":"AutoQueryGrid xkcd","slug":"autoquerygrid-xkcd"},{"level":3,"title":"DataGrid xkcd","slug":"datagrid-xkcd"},{"level":2,"title":"Razor SSG Improvements","slug":"razor-ssg-improvements"},{"level":3,"title":"Razor SSG Websites","slug":"razor-ssg-websites"},{"level":3,"title":"Markdown Video Feature","slug":"markdown-video-feature"},{"level":3,"title":"Markdown Docs","slug":"markdown-docs"},{"level":3,"title":"Metadata APIs","slug":"metadata-apis"},{"level":3,"title":"CreatorKit Integration","slug":"creatorkit-integration"},{"level":3,"title":"Integration Pages","slug":"integration-pages"},{"level":3,"title":"Pre-rendering removed from vue-mjs","slug":"pre-rendering-removed-from-vue-mjs"},{"level":3,"title":"AutoQuery Enum Flags","slug":"autoquery-enum-flags"},{"level":3,"title":"Sqlite EnableForeignKeys","slug":"sqlite-enableforeignkeys"},{"level":3,"title":"CorsFeature AppSettings","slug":"corsfeature-appsettings"}],"relativePath":"releases/v6_9.md"}`,pa={},ua=Object.assign(pa,{__name:"v6_9",setup(t){return(g,e)=>(s(),n("div",null,[X,O,a("div",$,[a("div",J,[p(i(l),{icon:"vscode-icons:file-type-html",class:"w-72 h-72"}),p(i(l),{icon:"logos:vue",class:"w-72 h-72"}),p(i(l),{icon:"simple-icons:openai",class:"w-72 h-72 py-4"})])]),Z,Y,aa,sa,na,p(u,{files:{_videos:{projects:{_:["video1.md","video2.md"]},vue:{_:["video1.md","video2.md"]}}},class:"cursor-pointer",onClick:e[0]||(e[0]=o=>k("https://github.com/NetCoreTemplates/razor-ssg/tree/main/MyApp/_videos"))},null,8,["files"]),ta,p(u,{files:{_pages:{creatorkit:{_:["about.md","components.md","customize.md","install.md","integrations.md","portal-mailruns.md","portal-messages.md","portal-overview.md","portal-posts.md"]}}},class:"cursor-pointer",onClick:e[1]||(e[1]=o=>k("https://github.com/NetCoreTemplates/razor-ssg/tree/main/MyApp/_pages/creatorkit"))},null,8,["files"]),ea,p(u,{files:{meta:{2021:{_:["all.json","posts.json","videos.json"]},2022:{_:["all.json","posts.json"]},2023:{_:["all.json","pages.json","posts.json","videos.json","whatsnew.json"]},_:["all.json","index.json"]}},class:"mb-8 cursor-pointer",onClick:e[2]||(e[2]=o=>k("https://github.com/NetCoreTemplates/razor-ssg/tree/gh-pages/meta"))},null,8,["files"]),oa]))}});export{ia as __pageData,ua as default};
